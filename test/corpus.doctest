-------------------------------------------------------------------------------
Unit tests for the corpus readers.
-------------------------------------------------------------------------------

nltk.corpus.abc: Australian Broadcasting Commission 2006
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    >>> from nltk.corpus import abc
    >>> print abc.items
    ['rural', 'science']
    >>> rural = abc.read('rural')
    >>> print rural[:4], rural[10:12]
    ['PM', 'denies', 'knowledge', 'of'] ['denied', 'he']
    >>> print repr(abc.read('rural', 'raw')[:20])
    'PM denies knowledge '

nltk.corpus.brown: The Brown Corpus
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    >>> from nltk.corpus import brown
    >>> # Default: grouped by sentence, not by para, tagged.
    >>> d = brown.read('a')
    >>> print d[3][:4]
    [('``', '``'), ('Only', 'rb'), ('a', 'at'), ('relative', 'jj')]
    >>> d = brown.read('a', grouped_by_sent=False)
    >>> print d[:3]
    [('The', 'at'), ('Fulton', 'np-tl'), ('County', 'nn-tl')]
    >>> d = brown.read('a', grouped_by_para=True)
    >>> print [para[0][0] for para in d[:5]]
    [('The', 'at'), ('The', 'at'), ('The', 'at'), ('``', '``'), ('The', 'at')]
    >>> d = brown.read('a', format='tokenized')
    >>> print d[3][:4]
    ['``', 'Only', 'a', 'relative']
    
nltk.corpus.cmudict: The Carnegie Mellon Pronouncing Dictionary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    >>> from nltk.corpus import cmudict
    >>> for entry in cmudict.read()[200:204]: print entry
    ['ABEND', 1, ('AE1', 'B', 'EH0', 'N', 'D')]
    ['ABEND', 2, ('AH0', 'B', 'EH1', 'N', 'D')]
    ['ABENDROTH', 1, ('AE1', 'B', 'AH0', 'N', 'D', 'R', 'AO0', 'TH')]
    ['ABER', 1, ('EY1', 'B', 'ER0')]
    >>> cmu = cmudict.read_lexicon(format='dictionary')
    >>> print cmu['NATURAL'][0]
    ('N', 'AE1', 'CH', 'ER0', 'AH0', 'L')
    >>> print cmu['LANGUAGE'][0]
    ('L', 'AE1', 'NG', 'G', 'W', 'AH0', 'JH')
    >>> print cmu['TOOL'][0]
    ('T', 'UW1', 'L')
    >>> print cmu['KIT'][0]
    ('K', 'IH1', 'T')


Demo Functions
~~~~~~~~~~~~~~
    # Ignore sys.stdout output -- just check if we get an exception.
    # We do this because some of the demos produce nondeterministic
    # or platform-specific output.
    >>> import sys, tempfile
    >>> sys.stdout = tempfile.TemporaryFile()
    >>> # Run all demos.
    >>> from nltk.corpus import abc
    >>> abc.demo()
    >>> from nltk.corpus import brown
    >>> brown.demo()
    >>> from nltk.corpus import chat80
    >>> #chat80.demo() -- no demo funciton
    >>> from nltk.corpus import cmudict
    >>> cmudict.demo()
    >>> from nltk.corpus import conll2000
    >>> conll2000.demo()
    >>> from nltk.corpus import conll2002
    >>> conll2002.demo()
    >>> from nltk.corpus import genesis
    >>> genesis.demo()
    >>> from nltk.corpus import gutenberg
    >>> gutenberg.demo()
    >>> from nltk.corpus import ieer
    >>> ieer.demo()
    >>> from nltk.corpus import inaugural
    >>> inaugural.demo()
    >>> from nltk.corpus import indian
    >>> indian.demo()
    >>> from nltk.corpus import names
    >>> names.demo()
    >>> from nltk.corpus import ppattach
    >>> ppattach.demo()
    >>> from nltk.corpus import senseval
    >>> senseval.demo()
    >>> from nltk.corpus import shakespeare
    >>> shakespeare.demo()
    >>> from nltk.corpus import sinica_treebank
    >>> sinica_treebank.demo(draw=False)
    >>> from nltk.corpus import state_union
    >>> state_union.demo()
    >>> from nltk.corpus import stopwords
    >>> stopwords.demo()
    >>> from nltk.corpus import timit
    >>> timit.demo(audio=False)
    >>> from nltk.corpus import toolbox
    >>> toolbox.demo()
    >>> from nltk.corpus import treebank
    >>> treebank.demo()
    >>> from nltk.corpus import udhr
    >>> udhr.demo()
    >>> from nltk.corpus import web
    >>> web.demo()
    >>> from nltk.corpus import webtext
    >>> webtext.demo()
    >>> from nltk.corpus import words
    >>> words.demo()
    >>> from nltk.corpus import ycoe
    >>> #ycoe.demo() -- corpus not distributed w/ nltk
    >>> # Restore sys.stdout.
    >>> sys.stdout.close()
    >>> sys.stdout = sys.__stdout__


