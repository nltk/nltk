TIGERSearch Implementation
==========================

This module contains an implementation of TIGERSearch_. It also has the extensions for
universal quantification described in `Marek et al. (2008)`_

Differences to the original TIGERSearch query language can be found in the `Query Language Status`_
document.

Dependencies
============

 * Required

  * Python 2.5
  * PyParsing_

 * Optional

  * lxml_: Faster corpus indexing

 * Optional (needed for Python 2.5 only)

  * processing_: Parallel query evaluation
  * pysqlite2_: Newer version of PySqlite2 are considerably faster


Available Corpora
=================

 * TIGER_ (German)
 * NEGRA_ (German)
 * Smultron_ (German, English, Swedish)
 
Using the tool TIGERRegistry from the original TIGERSearch_, several standard 
corpora can be converted into TIGER-XML, among them the Penn Treebank.

Since none of the corpora mentioned above can be freely distributed, the demo script
converts the fragment of the Penn Treebank distributed with NLTK into TIGER-XML format
and indexes the corpus. You can keep the corpus (and skip conversion/indexing) using the 
`-c` argument to the demo script. 


.. _TIGERSearch: http://www.ims.uni-stuttgart.de/projekte/TIGER/TIGERSearch/
.. _TIGER: http://www.ims.uni-stuttgart.de/projekte/TIGER/
.. _NEGRA: http://www.coli.uni-saarland.de/projects/sfb378/negra-corpus/negra-corpus.html
.. _Smultron: http://www.ling.su.se/DaLi/research/smultron/index.htm
.. _Marek et al. (2008): http://diotavelli.net/files/konvens08_extendingtsql_final.pdf
.. _Query Language Status: http://dev.ling.su.se/treealigner/wiki/TigerSearch Query Evaluator
.. _PyParsing: http://pyparsing.wikispaces.com/
.. _lxml: http://codespeak.net/lxml/
.. _processing: http://pypi.python.org/pypi/processing
.. _pysqlite2: http://pysqlite.org/
