# Natural Language Toolkit: Feature Extraction
#
# Copyright (C) 2001-2007 University of Pennsylvania
# Author: Edward Loper <edloper@gradient.cis.upenn.edu>
#         Steven Bird <sb@csse.unimelb.edu.au> (porting)
# URL: <http://nltk.sf.net>
# For license information, see LICENSE.TXT
#
# $Id: __init__.py 2975 2006-04-03 07:00:11Z stevenbird $

"""
Classes and interfaces for processing a token's X{features}, or
specific pieces of information about the token.  Features are
extracted from a token by X{feature detectors}, and
stored in a feature dictionary, which maps feature names to feature
values.  A X{feature encoder} can then be used to translate the
feature dictionary into a homogenous representation (such as a sparse
boolean list), suitable for use with other processing tasks.

@todo: Add interfaces & support for feature selection.
"""

######################################################################
## Feature Detection
######################################################################

class FeatureDetectorI:
    """
    A processing class for finding the values of one or more features
    for a token.  These features are stored in the C{FEATURES}
    property, which contains a dictionary mapping from feature names
    to feature values.
    """
    def features(self):
        """
        @return: A list of the names of the features that can be
        generated by this feature detector.  This list contains all
        features that the detector might generate; but the detector
        may generate a subset of these features for a given token,
        depending on its value.
            
        @rtype: C{list} of C{string}
        """
        raise NotImplementedError
    
    def get_features(self, token):
        """
        Find the values of this detector's features for C{token}, and
        return them as a dictionary from feature names to feature
        values.
        
        @param token: The token whose features should be found.
        @type token: L{Token}
        @rtype: C{dict} from C{string} to C{*}
        """
        raise NotImplementedError
        
class MergedFeatureDetector(FeatureDetectorI):
    def __init__(self, *detectors):
        self._detectors = detectors

    def features(self):
        feature_names = set()
        for detector in self._detectors:
            feature_names.update(detector.features())
        return list(feature_names)

    def get_features(self, token):
        features = {}
        for detector in self._detectors:
            features.update(detector.get_features(token))
        return features

class PropertyFeatureDetector(FeatureDetectorI):
    """
    A feature detector that copies one or more of a token's properties
    into the feature dictionary.
    """
    def __init__(self, functions):
        """
        Create a new feature detector that applies the supplied functions
        to each token.
        
        @type functions: dictionary of functions
        @param properties: one or more functions in one string argument to compute
          the features.
        """
        self._functions = functions
        
    def features(self):
        return self._functions.keys()
    
    def get_features(self, token):
        return dict([(feature, function(token)) for (feature, function) in self._functions.items()])

######################################################################
## Demo
######################################################################

def demo():
    from nltk_lite.corpora import brown
    from nltk_lite import detect

    # Create the feature detector.
    detector = detect.PropertyFeatureDetector({'text': lambda t:t})

    for sent in list(brown.raw('a'))[:10]:
        for tok in sent:
            print detector.get_features(tok)

if __name__ == '__main__': demo()
