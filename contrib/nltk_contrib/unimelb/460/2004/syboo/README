				README
			       ========
semanticProcessor.py is the main program that converts a given sentence
into predicate logic form. It is used in conjunction with the myMain.py
file submitted. Please ensure that they are in the same directory.
myMain.py is originated from the rspeer package in the nltk_contrib. It has
been modified so that it can return an the output to the caller,
semanticProcessor.py


There are two ways of running the program.
------------------------------------------

1) We've provided a shell script called regression.sh. This script contains
some pre-determined inputs and it will invoke semanticProccessor.py automatically. 
Please chmod it using "chmod +x regression.sh". To run regression.sh,
please type regression.sh on the command line.


2) To run the program from command line, type 
 >> python semanticProcessor.py grammar.cfg
 and then type in a sentence to parse, WITHOUT quotation marks.

This grammar will parse the following sentences (and similar)

"this restaurant serves pizza" -->
S[-question, sem=[predicate=[object='pizza', +true, verb='serves'], 
		subject='restaurant'], tense=present]

"this restaurant serves pizza and soup" -->
S[-question, sem=[predicate=[object=[+and, n1='pizza', n2='soup'], +true, 
		verb='serve'], subject='restaurant'], tense=present]

"chinabar serves noodles" -->
S[-question, sem=[predicate=[object='noodles', +true, verb='serves'], 
		subject='chinabar'], tense=present]

"this restaurant does serve pizza" -->
(S[-question, sem=[predicate=[object='pizza', +true, verb='serve'], 
		subject='restaurant'], tense=present]

"this restaurant does not serve pizza" -->
S[-question, sem=[predicate=[object='pizza', -true, verb='serve'], 
		subject='restaurant'], tense=present]

"pizza costs five dollars" -->
(S[-question, sem=[predicate=[object=[amt=5, unit='dollar'], +true, 
		verb='cost'], subject='pizza'], tense=present]

"pizza costs one dollar and fifty cents" -->
S[-question, sem=[predicate=[object=[+and, n1=[amt=1, unit='dollar'], 
		n2=[amt=50, unit='cent']], +true, verb='cost'], subject='pizza'], 
		tense=present]

"does this restaurant serve soup" (please leave off question mark) -->
S[+question, sem=[predicate=[object='soup', +true, verb='serve'], 
		subject='restaurant'], tense=present]

"how_much does pizza cost" -->
S[+question, sem=[object=?ans, predicate='cost', subject='pizza'], 
		tense=present]

"I believe this restaurant serves pizza" -->
S[-question, sem=[predicate=[object=[predicate=[object='pizza', +true,
verb='serve'], subject='restaurant'], +true, verb='believe'], subject='I'],
tense=present]

If the given sentence is UNGRAMMATICAL, the program will output an ERROR
message, and terminate the execution. If it is grammatical, the program
will return a predicate logic representation of the sentence in a form of:
    e.g. this restaurant serves pizza ->
	question(no), serve(Y, X), equal(Y, restaurant), equal(X, pizza)

We have also implemented a simple question-answering system. To run the
system, do the following steps:
1. open prolog 
2. compile ansSystem.pl
3. question(yes), cost(Y, X), equal(X, Answer), equal(Y, pizza).
