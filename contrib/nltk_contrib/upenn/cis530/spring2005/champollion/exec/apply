#!/home/champoll/Python/bin/python

"""
Applies the transformation rules learned by a previous application
of fnTBL (e.g. via the 'learn' script) to a text file.
usage: apply <rulefile> <textfile>
"""


import sys, commands, tempfile

blank = '_' # has to be the same as in the other scripts
deletion = '@' # has to be the same as in the other scripts
parameterfile = '~/tblplus/Tbl-parameters/parameter-file.txt'

tmp = tempfile.gettempdir()+'/'

# hack to print something directly attached to previous
# output
def no_space_before(x):
    sys.stdout.softspace = 0
    return x

if not len(sys.argv) == 3:
        print 'usage: apply <rulefile> <textfile>'
        sys.exit(1)


# start of script

# bring the text file in suitable format for fnTBL
# fnTBL's designers didn't foresee we'd ever want to apply their system to anything else
# than a test file. So we need to include a 'goldstandard' column into our file just to
# meet their input format requirements. This is done in the following:
commands.getoutput("maketestfile " + sys.argv[2] + " > "+tmp+"__fntemp__")

# run fnTBL with the specified rules on the specified test file
commands.getoutput("fnTBL "+tmp+"__fntemp__ " + sys.argv[1] + " -F "+parameterfile+" -printRuleTrace > "+tmp+"__fntemp1__")

# throw away everything in the output file that isn't the actual output:
commands.getoutput("cut --delimiter=' ' -f 2 "+tmp+"__fntemp1__ > "+tmp+"__fntemp2__")

# prepare to write into new file
fntemp3 = open(tmp+'__fntemp3__', 'w')

# right now every letter is on a separate line, so put them back together and resolve
# deletion and blank characters while we're at it

for line in open(tmp+'__fntemp2__'):
    line = line[:-1] # get rid of newline
    if not line == deletion:                   # the deletion character just gets ignored
        if line == '':                         # end of paragraph sentence -> insert newline
            fntemp3.write('\n')                
        elif line == blank:                  
            fntemp3.write(' '),                # blank symbol -> whitespace
        else:
            fntemp3.write(line),               # everything else just gets copied 1:1

fntemp3.close()
# __fntemp3__ now contains the output file, with one sentence per line,
# and with a whitespace at the beginning of every sentence that starts a
# paragraph. All we need to do is some minor formatting:

for line in open(tmp+'__fntemp3__'):
    line = line[:-1] # get rid of newline
    if line.startswith(' '):
        print
        print line[1:], # print w/o initial whitespace
    else:
        print line,

# clean up:
#commands.getoutput("rm -f "+tmp+"__fntemp__ "+tmp+"__fntemp1__ "+tmp+"__fntemp2__ "+tmp+"__fntemp3__")







