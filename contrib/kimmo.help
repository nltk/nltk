; pykimmo.help
; PyKimmo version 1.78
;
; Professor Bob Berwick
; Beracah Yankama


; Error messages & troubleshooting at the bottom.


::INTRO::
PyKimmo is intended to bridge some of the learning gaps in using PCKIMMO.  
By providing a gui, with rule rendering and instant feedback on rule
success while editing, we hope this will be a useful learning tool.

PyKimmo does not yet have a word grammar and thus cannot create the parse trees
that PCKIMMO-2 can.


::DIFFERENCES FROM PCKIMMO::
The PyKimmo system operates a little differently than the PcKimmo
system.  In some ways better, some ways worse.  PCKIMMO is highly 
integrated for speed, but in so doing, much of the transparency
and separation of operation is lost, making the learning curve
much steeper.

That said, for large lexicons, PCKIMMO is far faster on recognition tasks.

Both the Lexicon and Rule file formats are different.  While PyKimmo
has its own rul file format, it can load and read PCKIMMO .rul files.
The Lexicon however, was stripped of ALTERNATION and LEXICON keywords
for readability.

PyKimmo adds ARROWRULE functionality to the .rul file, to more compactly
represent two-level rule transformations.

PyKimmo's KIMMO engine operates *purely* on subsets.  It knows nothing
of "wildcard" (ANY) chars, BOUNDARY chars, or NULL (0) chars, except that
it defaults to remove 0 chars from the output.  This means that rules have
to be written to explicitly take them into account.  This is different
from PCKIMMO, which uses the ALPHABET definition to create an ANY subset,
and the BOUNDARY definition to create default transitions for the boundary
character. That means that all addition and removal of boundary chars, or 
creation of wildcard sets takes place external to the subset engine.
The boundary char does *not* always need to be defined -- it is a lexical character
representation of the surface "end-of-word" transition.  If this transition 
is used in rules or arrowrules, it needs to be defined because it is otherwise 
impossible to represent the end of string char.  Otherwise, it can increase
the necessary complexity of the rules, because the definition of a boundary 
character will cause a # to appended to the end of the string.  

! It is of note that currently in PyKimmo, BOUNDARY *must* be a #, NULL must
be 0, and ANY must be @. 

The file format will be discussed in more detail in the "FILES" section of
this document.



::IMPORTANT NOTES::
Unmentioned in PCKIMMO Documentation is that in both PCKIMMO and PyKimmo,
is that the subsets in the rules are evaluated smallest to largest.  The
@ (any) char is evaluated last simply because it has the largest set.
That means that if two subsets have overlapping characters in a rule, the
smaller subset's transition will be chosen over the larger.  If they are
both the same size, then behavior is unpredictable.  


::STARTUP & FILES::
On startup, PyKimmo looks in the local dir and tries to load 'kimmo.cfg'
by default.  If you name your config file this, then you can speed your
startup time.

GIF Graphs and their temporary .dot files are written into the local directory.
If write access fails, then they are written into temp space under your
username ('/tmp/username/....gif'). The filename is displayed in the window
titlebar for locative purposes.

Lexicon files are named *.lex
Rule files are named *.rul
Batch testing files are named *.batch_test


.CFG Files
lexicon: mylexicon.lex
rules: myrules.rul
batch: mytest.batch_test
results: tagalog.results




!!! More coming.

populates list with cfgs

discuss boundary chars

remember to describe file format
Rule File Format
how is it different than pckimmo
SUBSET class
SUBSET @ 
DEFAULT (optional)
RULE
ARROWRULE

optional
BOUNDARY
ALPHABET
ANY


Lexicon File
	ALTERNATION ROOT N_ROOT V_ROOT
	Becomes
	ROOT: N_ROOT V_ROOT


	LEXICON word ROOT "feature tag"
	Becomes
	word ROOT "feature tag"

	!!! only spaces are allowed in the feature tag, surrounded by quots
	single quotes around are removed
	''
	'0' 





::GRAPHS::
In the version, the only graphs that PyKimmo is capable of generating
are of the lexicon and the FSAs.  Arrow rules are not graphed yet.



Interpreting the FSA graph.
	The edges (transitions) in the FSA graph follow the format of:
	surface1:lexical1, surface2:lexical2, surface3:lexical3
	A single character signifies the identity transition.
	For instance:  a,b,c
	actually means a:a, b:b, c:c

	Boxes represent invalid final states -- i.e. the FSA will fail
	if it ends in a state that is a box.  (boxes will also be red
	for readability)
	
	Circles are states that if ended in, the FSA rule will pass.  (These
	are green for readability)
	
	'0' final state is an automatic failure.  If the FSA transitions
	to this state, it fails.
	
	'1' (blue) is the starting state.
	

Lexicon Graph
	The Lexicon Graph is not intended to enumerate all possible edges
	between morphological states.  Instead it is intended to demonstrate
	the edges that *do exist* between states to quickly aid in debugging
	purposes.  For this reason, all the physical words which would 
	all the edges of the graph are omitted for readability purposes.
	
	From this graph you should be able to gather whether or not a particular
	orthographic group should be connected with a lexical class, if any
	directed cycles exist, or if a particular class is unpointed to.
	
	Cyan circles represent morphological equivalence groups.  When traversing
	the lexical state diagram, *all* paths from an equivalence group will 
	be taken.  White circles represent that lexical class -- the words that
	match inside that class will take different edges back to different
	equivalence groups.  If edges were named & enumerated, these would be
	the marked edges.  The other edges, from the cyan circles would be unmarked.
	
	
	

::TRACING::
The tracing window provides a mechanism to view step-by-step, how the
Python Kimmo engine proceeds through either recognition or generation.

!!! It is of note that PyKimmo is *significantly* slower with tracing 
on.  


Generation:
    4  I:i 
    4: Input:    i   t   +   Y  [I]...
    4> Output:   i   t   0   0  <i>...
	[1->1] [3->3] [1->2] [1->1] [1->1] [1->1] [1->1] 
      AT END OF WORD
     5  None:None 
     5: Input:    i   t   +   Y   I 
     5> Output:   i   t   0   0   i 
   SUCCESS!

    4  I:! 
    4: Input:    i   t   +   Y  [I]...
    4> Output:   i   t   0   0  <!>...
	[1->1] [3->0 (FAIL)] 
    BLOCKED by rule (0, <KimmoFSARule 9:"vowel harmony">, [3], True)


This shows that in this particular trace, generation is at the character
in the 4th position, which is potentially an I:i transition.  
In the past, it has successfully matched "it+Y" as "it00".
  "[1->1] [3->3] [1->2] [1->1] [1->1] [1->1] [1->1]"
demonstrates the states that the rules are in -- it is read as
[current_state -> next_state].  In this case, all next states are valid,
and so all the rule passes. "it+YI" is replaced with "it00i" ("iti").
 (Note that in the rules, the final states must be acceptable as well)
 
The second group shows as the generation backtracks and tries a different
transition pair -- I:! .  Here the second rule's next state is a 0, so
it automatically fails.  The message "BLOCKED by rule... name" is displayed.

The rule states [x->y] [a->b] [c->d] are ordered in the same order of entry
in the rule file (top down)


Recognition:
!!! To be written.




::ERRORS/Troubleshooting::

"collect_()" error.  This is amost always caused by a self-referential lexicon.
	For instance:
	ROOTS:		ROOTS V_Root N_Root
	Here 'ROOTS' refers to itself and forms a loop, defeating the 
		collection process.
	
	
IndexError: list index out of range
	either the width height (i.e. 7 9 ) definition of a RULE is incorrect, 
	or the length/width of one of the rule fields do not match.
	 !!! remember that comments must go on their own line.
	
:@ or :char invalid len() for int().
	One of the transition lines is either missing or corrupt.
	Make sure that you have one line for surface, and the line below 
		for lexical chars
	
"Morphology Setup Failed" (red), 
	Empty lexicon or lexicon not formatted correctly
		check that "Begin" is defined
	
Infinite looping on recognition
	Check that Lexicon is not self referential
	Make certain that End contains a 0 or # as the end state

Premature end on blank lexical entry
	Make certain that you use '' for an empty lexical entry 
		(not 0).  

	
!!! all the different errors
