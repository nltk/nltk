#############################
# Glue Semantics Formulas
#
# Entries are links from semantics types to Lists of Glue Formulas
#############################

adj_attributive_intersective : (\x.(<word> x), f), (\P Q x.((P x) and (Q x)), (f -o ((super.v -o super.r) -o (super.v -o super.r))))
adj_attributive_nonintersective : (\x.(<word> x), f), (\P Q x.(P (Q x)), (f -o ((super.v -o super.r) -o (super.v -o super.r))))
adj_attributive_relative_intersective :  (\x R.(<word> x R), f), (\P x R.((P x R) and (R x)), (f -o (super.v -o ((super.v -o super.r) -o super.r))))
adj_attributive_relative_nonintersective : (\x R.(<word> x R), f), (\P x R.(P x R), (f -o (super.v -o ((super.v -o super.r) -o super.r))))
adj_predicative : (\Q.some x.((<word> x) and (Q x)), ((f -o Var) -o Var))
adv : (\x.(<word> x), f), (\P Q x.(P (Q x)), (f -o (super -o super)))
adv_ModifyingRelativeAdj : (\x.(<word> x), f), (\P Q x R.(P (Q x R)), (f -o (super -o super)))
art_def : (\P Q.some x.((P x) and (every y.((Q y) iff (x=y)))), ((v -o r) -o ((f -o Var) -o Var)))
cc_clause : (\P Q.(P and Q), (subj -o (obj -o f)))
dtv : (\x y z.(<word> x y z), (subj -o (obj -o (theme -o f))))
equi : (\x P.(<word> x P), (subj -o ((xcomp.subj -o xcomp) -o f)))
ex_quant : (\P Q.some x.((P x) and (Q x)), ((v -o r) -o ((f -o Var) -o Var)))
iv : (\x.(<word> x), (subj -o f))
n : (\x.(<word> x), (v -o r))
no_quant : (\P Q.(not some x.((P x) and (Q x))), ((v -o r) -o ((f -o Var) -o Var)))
obj_equi : (\x P.(<word> x P), (subj -o (obj -o ((xcomp.subj -o xcomp) -o f))))
pn : (<word>, f)
pro : (\P.(some x.(x = (alpha x)) and (P x)), ((f -o Var) -o Var))
raising : (\P.(<word> P), (xcomp -o f))
recip : (\x Q.(RECIP x Q), (Var -o ((Var -o (f -o super)) -o super)))
tense : (\Q.(<word> Q), (f -o f))
tv : (\x y.(<word> x y), (subj -o (obj -o f)))
tv_comp : (\x y.(<word> x y), (subj -o (comp -o f)))
univ_quant : (\P Q.all x.((P x) implies (Q x)), ((v -o r) -o ((f -o Var) -o Var)))





#univ_n
#cc_np
#cc_vp
