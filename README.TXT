###############################################################
###                 THE NLTK CVS REPOSITORY                 ###
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###
### Copyright (C) 2003 University of Pennsylvania           ###
### Author: Edward Loper <edloper@gradient.cis.upenn.edu>   ###
### URL: <http://nltk.sf.net>                               ###
### For license information, see LICENSE.TXT                ###
###############################################################

Introduction
~~~~~~~~~~~~
    nltk is a Python package that simplifies the construction of
    programs that process natural language; and defines standard
    interfaces between the different components of an NLP system.


Repository Structure
~~~~~~~~~~~~~~~~~~~~
nltk
  |
  +-- src ................... Python source code
  |    |
  |    +-- nltk ............. Source code for the toolkit itself
  |    |
  |    +-- scripts .......... Command-line scripts based on nltk
  |    |
  |    +-- nltk_contrib ..... Source code for 3rd-party contributions
  |    |
  |    +-- extensions ....... C extension drop-in replacements for
  |                           nltk modules
  |
  +-- doc ................... Documentation
  |    |
  |    +-- technical ........ Technical reports (LaTeX)
  |    |    |
  |    |    +-- proposal
  |    |    |
  |    |    +-- printing
  |    |    |
  |    |    +-- etc.
  |    |
  |    +-- tutorial ......... Tutorial-style documentation (Docbook)
  |    |    |
  |    |    +-- introduction
  |    |    |
  |    |    +-- etc.
  |    |
  |    +-- misc ............. Assorted short-term and meta documentation
  |    |
  |    +-- webpage .......... Static content for the web page (HTML)
  |    |
  |    +-- (reference) ...... Reference documentation (generated by make)
  |    |
  |    +-- (built_webpage) .. Web page (generated by make)
  |
  +-- data .................. Corpus samples
  |
  +-- psets ................. Problem sets and sample exercise sets


Documentation
~~~~~~~~~~~~~
    Documentation is split into four sets:

        - Tutorial documentation: describes how to use the toolkit.
        - Technical reports: describe how the toolkit works, and
          provides the rational behind its design.
        - Reference documentation: provides precise descriptions of
          each Python module, class, and function defined by the
          toolkit. 
        - Miscellaneous documentation: is a place to store working
          documentation (e.g., descriptions of current issues with the 
          toolkit, and intended future additions).

    Tutorial Documentation
    ~~~~~~~~~~~~~~~~~~~~~~
        Each tutorial document is given a short descriptive name
        (typically 5-15 characters, consisting of lower case
        letters).  A tutorial document whose name is <name> is stored
        in doc/tutorial/<name>, and contains at least the following
        files: 

            - <name>.xml .... The tutorial document, written using the 
                              Docbook DTD.
            - <name>.info ... A file used to store meta-information
                              about the tutorial documents.  It
                              consists of keys/value pairs, separated
                              by ":"s.  Values may span multiple
                              lines.  Currently recognized keys are:
                              name, abstract, status, deadline.  This
                              file is used to construct the tutorial
                              documentation webpage.

    Technical Reports
    ~~~~~~~~~~~~~~~~~
        Each technical report is given a short descriptive name
        (typically 5-15 characters, consisting of lower case
        letters).  A technical report whose name is <name> is stored
        in doc/technical/<name>, and contains at least the following
        files: 

            - <name>.tex .... The techical report, written using 
                              LaTeX.
            - <name>.info ... A file used to store meta-information
                              about the technical reports.  It
                              consists of keys/value pairs, separated
                              by ":"s.  Values may span multiple
                              lines.  Currently recognized keys are:
                              name, abstract, status, deadline.  This
                              file is used to construct the technical
                              reports webpage.

    Miscellaneous Documentation
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        The miscellaneous documentation is maintained in a single
        directory (doc/misc).  It consists primarily of plaintext and
        LaTeX files.

    Reference Documentation
    ~~~~~~~~~~~~~~~~~~~~~~~
        The reference documentation is generated automatically from
        the Python source code; it is not included in the CVS
        repository.  It can be created from the Python source files
        by running "make reference" in the doc directory.  This will
        create a new doc/reference directory, containing the reference
        documentation.  This directory will also be built if you run
        "make documentation" from the main Makefile.

    Webpage
    ~~~~~~~
        The webpage consists of static and dynamic content.  Static
        content is kept in the directory doc/webpage.  Dynamic content
        (including reference documentation, technical reports,
        tutorials, and automatic indexes) is generated by the Makefile
        in the doc directory.  Running "make webpage" in the doc
        directory will generate a new doc/built_webpage directory,
        containing the complete webpage.


Makefiles
~~~~~~~~~
    The main Makefile can be used to perform the following tasks:

        make documentation: Convert all documentation and problem sets
            to output formats (ps and pdf for technical documentation
            and problem sets; html for tutorial documentation).
        make test: Run unit testing on the toolkit.
        make distributions: Construct distribution files for the
            toolkit. 
        make webpage: Build a local copy of the webpage, including
            both static content (from doc/webpage) and dynamic
            content.
        make xfer: Build a local copy of the webpage, and upload it to
            sourceforge.
        make clean: Remove all temporary files and output files
            generated by make.

    In addition, the Makefiles in the doc, psets, and src directories
    can be used to perform other tasks.


Corpus Samples
~~~~~~~~~~~~~~
    Samples for several important corpora are included with NLTK.
    These must be installed according to the instructions in
    data/INSTALL.TXT


Problem Sets
~~~~~~~~~~~~
    The structure of the problem set directory has not yet been
    decided.  The two options under consideration are:

        - Store each problem set or exercise set in its own directory, 
          along with the corresponding solutions.
        - Store all problem sets, sample exercises, and solutions in a 
          single directory.

    The naming conventions for problem sets have also not yet been
    decided. 


Releases
~~~~~~~~
    Releases are available on SourceForge; and are tagged in the
    repository (starting with release 0.4) with tags of the form
    "release-<m>-<n>", where <m> is the major number, and <n> is the
    minor number (e.g., for release 2.18, <m>=2; and <n>=18).

    The procedure for making a new release is:

        1. Update the version numbers.  The version numbers are
           currently listed/referenced in the following files:
             - Makefile (CORPORA_VERSION)
             - doc/webpage/index.html
             - doc/webpage/docs.html
             - src/nltk/__init__.py
             - contrib/nltk_contrib/__init__.py
        2. Make sure all changes are committed.
        3. Generate a CVS log of all the changes since the previous
           release (note quote marks):

               cvs log "-rrelease-<m>-<n-1>:" >changes.cvslog

           Alternatively, you can use the cvschanges script in the
           src directory, which filters a lot of useless material
           from the log (e.g., logs for Attic files):

               cvschanges release-<m>-<n-1> changes.cvslog

        4. Examine the cvs log, and use it to add a new section to 
           src/CHANGES.TXT; commit the changes to src/CHANGES.TXT
        5. Tag the new release:

               cvs tag "release-<m>-<n>"

        6. Run "make distributions"
        7. Run "make webpage.tar.gz"
        8. Rename doc/webpage.tar.gz to doc/nltk-<m>.<n>-docs.tar.gz
        9. FTP src/dist/nltk-<m>.<n>* and doc/nltk-<m>.<n>-docs.tar.gz
           to the "incoming" directory of "upload.sf.net"
       10. Add the new release to sourceforge, using the release admin
           page.
       11. Update versions to the new alpha version, and commit:
             - Makefile (CORPORA_VERSION)
             - doc/webpage/index.html
             - doc/webpage/docs.html
             - src/nltk/__init__.py
             - contrib/nltk_contrib/__init__.py
