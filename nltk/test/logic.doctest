=========================
 Logic & Lambda Calculus
=========================
    >>> from nltk.sem import *

Test for equality under alpha-conversion. 

    >>> lp = LogicParser()
    >>> e1 = lp.parse('exists x.P(x)')
    >>> print e1
    exists x.P(x)
    >>> e2 = e1.alpha_convert(VariableExpression('z'))
    >>> print e2
    exists z.P(z)
    >>> e1 == e2
    True

    
    >>> l = lp.parse(r'(\x.\x.x(x)(1))').simplify()
    >>> id = lp.parse(r'\x.x(x)')
    >>> l == id
    True

Test numerals

    >>> zero = lp.parse(r'\f x.x')
    >>> one = lp.parse(r'\f x.f(x)')
    >>> two = lp.parse(r'\f x.f(f(x))')
    >>> three = lp.parse(r'\f x.f(f(f(x)))')
    >>> four = lp.parse(r'\f x.f(f(f(f(x))))')
    >>> succ = lp.parse(r'\n f x.f(n(f,x))')
    >>> plus = lp.parse(r'\m n f x.m(f,n(f,x))')
    >>> mult = lp.parse(r'\m n f.m(n(f))')
    >>> pred = lp.parse(r'\n f x.n(\g h.h(g(f))(\u.x)(\u.u))')
    >>> v1 = ApplicationExpression(succ, [zero]).simplify()
    >>> v1 == one
    True
    >>> v2 = ApplicationExpression(succ, [v1]).simplify()
    >>> v2 == two
    True
    >>> v3 = ApplicationExpression(ApplicationExpression(plus, [v1]), [v2]).simplify()
    >>> v3 == three
    True
    >>> v4 = ApplicationExpression(ApplicationExpression(mult, [v2]), [v2]).simplify()
    >>> v4 == four
    True
    >>> v5 = ApplicationExpression(pred, [ApplicationExpression(pred, [v4])]).simplify()
    >>> v5 == two
    True
    
``betaConversionTestSuite.pl``
------------------------------

From B&B's *Representation and Inference for Natural Language*.

    >>> x1 = lp.parse(r'\p.p(mia)(\x.walk(x))').simplify()
    >>> x2 = lp.parse(r'walk(mia)').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'exists x.(man(x) & ((\p.exists x.(woman(x) & p(x)))(\y.love(x,y))))').simplify()
    >>> x2 = lp.parse(r'exists x.(man(x) & exists y.(woman(y) & love(x,y)))').simplify()
    >>> x1 == x2
    True
    >>> x1 = lp.parse(r'(\a.sleep(a)(mia))').simplify()
    >>> x2 = lp.parse(r'sleep(mia)').simplify()
    >>> x1 == x2
    True
    >>> x1 = lp.parse(r'\a.\b.like(b,a)(mia)').simplify()
    >>> x2 = lp.parse(r'\b.like(b,mia)').simplify()
    >>> x1 == x2
    True
    >>> x1 = lp.parse(r'\a.(\b.like(b,a)(vincent))').simplify()
    >>> x2 = lp.parse(r'\a.like(vincent,a)').simplify()
    >>> x1 == x2
    True
    >>> x1 = lp.parse(r'\a.((\b.like(b,a)(vincent)) & sleep(a))').simplify()
    >>> x2 = lp.parse(r'\a.(like(vincent,a) & sleep(a))').simplify()
    >>> x1 == x2
    True

    >>> x1 = lp.parse(r'(\a.\b.like(b,a)(mia)(vincent))').simplify()
    >>> x2 = lp.parse(r'like(vincent,mia)').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'p((\a.sleep(a)(vincent)))').simplify()
    >>> x2 = lp.parse(r'p(sleep(vincent))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'\a.a((\b.sleep(b)(vincent)))').simplify()
    >>> x2 = lp.parse(r'\a.a(sleep(vincent))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'\a.a(sleep(vincent))').simplify()
    >>> x2 = lp.parse(r'\a.a(sleep(vincent))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.a(vincent)(\b.sleep(b)))').simplify()
    >>> x2 = lp.parse(r'sleep(vincent)').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'\a.believe(mia,a(vincent))(\b.sleep(b))').simplify()
    >>> x2 = lp.parse(r'believe(mia,sleep(vincent))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.(a(vincent) & a(mia)))(\b.sleep(b))').simplify()
    >>> x2 = lp.parse(r'(sleep(vincent) & sleep(mia))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.\b.((\c.c(a(vincent)))(\d.probably(d)) & (\c.c(b(mia))(\d.improbably(d)))))(\e.walk(e))(\e.talk(e))').simplify()
    >>> x2 = lp.parse(r'(probably(walk(vincent)) & improbably(talk(mia)))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.\b.(\c.c(a,b)(\d.\e.love(d,e))))(jules)(mia)').simplify()
    >>> x2 = lp.parse(r'love(jules,mia)').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.\b.exists c.(a(c) & b(c)))(\d.boxer(d),\d.sleep(d))').simplify()
    >>> x2 = lp.parse(r'exists c.(boxer(c) & sleep(c))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'\a.z(a)(\c.\a.like(a,c))').simplify()
    >>> x2 = lp.parse(r'z(\c.\a.like(a,c))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'\a.\b.a(b)(\c.\b.like(b,c))').simplify()
    >>> x2 = lp.parse(r'\b.(\c.\b.like(b,c)(b))').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.\b.(\c.c(a,b)(\b.\a.loves(b,a))))(jules)(mia)').simplify()
    >>> x2 = lp.parse(r'loves(jules,mia)').simplify()
    >>> x1 == x2
    True
    
    >>> x1 = lp.parse(r'(\a.\b.((exists b.a(b)) & a(b)))(\c.boxer(c))(vincent)').simplify()
    >>> x2 = lp.parse(r'((exists b.boxer(b)) & boxer(vincent))').simplify()
    >>> x1 == x2
    True

Test Parser

        >>> n = Tokens.NEW_NLTK
        >>> print lp.parse(r'john')
        john
        >>> print lp.parse(r'x')
        x
        >>> print lp.parse(r'-man(x)')
        -man(x)
        >>> print lp.parse(r'--man(x)')
        --man(x)
        >>> print lp.parse(r'(man(x))')
        man(x)
        >>> print lp.parse(r'((man(x)))')
        man(x)
        >>> print lp.parse(r'man(x) <-> tall(x)')
        (man(x) <-> tall(x))
        >>> print lp.parse(r'(man(x) <-> tall(x))')
        (man(x) <-> tall(x))
        >>> print lp.parse(r'(man(x) & tall(x) & walks(x))')
        (man(x) & (tall(x) & walks(x)))
        >>> print lp.parse(r'((man(x) & tall(x)) & walks(x))')
        ((man(x) & tall(x)) & walks(x))
        >>> print lp.parse(r'(man(x) & (tall(x) & walks(x)))')
        (man(x) & (tall(x) & walks(x)))
        >>> print lp.parse(r'exists x.man(x)')
        exists x.man(x)
        >>> print lp.parse(r'exists x.(man(x) & tall(x))')
        exists x.(man(x) & tall(x))
        >>> print lp.parse(r'\x.man(x)')
        \x.man(x)
        >>> print lp.parse(r'\x.man(x)(john)')
        \x.man(x)(john)
        >>> print lp.parse(r'\x.man(x)(john) & tall(x)')
        (\x.man(x)(john) & tall(x))
        >>> print lp.parse(r'\x.\y.sees(x,y)')
        \x.\y.sees(x,y)
        >>> print lp.parse(r'\x  y.sees(x,y)')
        \x.\y.sees(x,y)
        >>> print lp.parse(r'\x.\y.sees(x,y)(a)')
        (\x.\y.sees(x,y))(a)
        >>> print lp.parse(r'\x  y.sees(x,y)(a)')
        (\x.\y.sees(x,y))(a)
        >>> print lp.parse(r'\x.\y.sees(x,y)(a)(b)')
        ((\x.\y.sees(x,y))(a))(b)
        >>> print lp.parse(r'\x  y.sees(x,y)(a)(b)')
        ((\x.\y.sees(x,y))(a))(b)
        >>> print lp.parse(r'\x.\y.sees(x,y)(a,b)')
        ((\x.\y.sees(x,y))(a))(b)
        >>> print lp.parse(r'\x  y.sees(x,y)(a,b)')
        ((\x.\y.sees(x,y))(a))(b)
        >>> print lp.parse(r'((\x.\y.sees(x,y))(a))(b)')
        ((\x.\y.sees(x,y))(a))(b)
        >>> print lp.parse(r'P(Q)')
        P(Q)
        >>> print lp.parse(r'P(Q(x))')
        P(Q(x))
        >>> print lp.parse(r'(\x.exists y.walks(x,y))(x)')
        (\x.exists y.walks(x,y))(x)
        >>> print lp.parse(r'exists x.(x = john)')
        exists x.(x = john)
        >>> print lp.parse(r'((\P.\Q.exists x.(P(x) & Q(x)))(\x.dog(x)))(\x.bark(x))')
        ((\P.\Q.exists x.(P(x) & Q(x)))(\x.dog(x)))(\x.bark(x))

Simplify            

        >>> print lp.parse(r'\x.man(x)(john)').simplify()
        man(john)
        >>> print lp.parse(r'\x.\y.sees(x,y)(john, mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'\x  y.sees(x,y)(john, mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'\x.\y.sees(x,y)(john)(mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'\x  y.sees(x,y)(john)(mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'\x.\y.sees(x,y)(john)').simplify()
        \y.sees(john,y)
        >>> print lp.parse(r'\x  y.sees(x,y)(john)').simplify()
        \y.sees(john,y)
        >>> print lp.parse(r'(\x.\y.sees(x,y)(john))(mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'(\x  y.sees(x,y)(john))(mary)').simplify()
        sees(john,mary)
        >>> print lp.parse(r'exists x.(man(x) & (\x.exists y.walks(x,y))(x))').simplify()
        exists x.(man(x) & exists y.walks(x,y))
        >>> e1 = lp.parse(r'exists x.(man(x) & (\x.exists y.walks(x,y))(y))').simplify()
        >>> e2 = lp.parse(r'exists x.(man(x) & exists z1.walks(y,z1))')
        >>> e1 == e2
        True
        >>> print lp.parse(r'(\P Q.exists x.(P(x) & Q(x)))(\x.dog(x))').simplify()
        \Q.exists x.(dog(x) & Q(x))
        >>> print lp.parse(r'((\P.\Q.exists x.(P(x) & Q(x)))(\x.dog(x)))(\x.bark(x))').simplify()
        exists x.(dog(x) & bark(x))
    
Replace

        >>> a = lp.parse(r'a')
        >>> x = lp.parse(r'x')
        >>> y = lp.parse(r'y')
        >>> z = lp.parse(r'z')

        >>> print lp.parse(r'man(x)').replace(x, a, False)
        man(a)

        >>> print lp.parse(r'(man(x) & tall(x))').replace(x, a, False)
        (man(a) & tall(a))

        >>> print lp.parse(r'exists x.man(x)').replace(x, a, False)
        exists x.man(x)

        >>> print lp.parse(r'exists x.man(x)').replace(x, a, True)
        exists a.man(a)

        >>> print lp.parse(r'exists x.give(x,y,z)').replace(y, a, False)
        exists x.give(x,a,z)

        >>> print lp.parse(r'exists x.give(x,y,z)').replace(y, a, True)
        exists x.give(x,a,z)

        >>> e1 = lp.parse(r'exists x.give(x,y,z)').replace(y, x, False)
        >>> e2 = lp.parse(r'exists z1.give(z1,x,z)')
        >>> e1 == e2
        True

        >>> e1 = lp.parse(r'exists x.give(x,y,z)').replace(y, x, True)
        >>> e2 = lp.parse(r'exists z1.give(z1,x,z)')
        >>> e1 == e2
        True

        >>> print lp.parse(r'\x y z.give(x,y,z)').replace(y, a, False)
        \x.\y.\z.give(x,y,z)

        >>> print lp.parse(r'\x y z.give(x,y,z)').replace(y, a, True)
        \x.\a.\z.give(x,a,z)

        >>> print lp.parse(r'\x.\y.give(x,y,z)').replace(z, a, False)
        \x.\y.give(x,y,a)

        >>> print lp.parse(r'\x.\y.give(x,y,z)').replace(z, a, True)
        \x.\y.give(x,y,a)

        >>> e1 = lp.parse(r'\x.\y.give(x,y,z)').replace(z, x, False)
        >>> e2 = lp.parse(r'\z1.\y.give(z1,y,x)')
        >>> e1 == e2
        True

        >>> e1 = lp.parse(r'\x.\y.give(x,y,z)').replace(z, x, True)
        >>> e2 = lp.parse(r'\z1.\y.give(z1,y,x)')
        >>> e1 == e2
        True

        >>> print lp.parse(r'\x.give(x,y,z)').replace(z, y, False)
        \x.give(x,y,y)

        >>> print lp.parse(r'\x.give(x,y,z)').replace(z, y, True)
        \x.give(x,y,y)
