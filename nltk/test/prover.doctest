==============
Theorem Prover
==============

---------------------------------
NLTK Interface to Theorem Provers
---------------------------------

The module ``nltk_contrib.theorem_prover`` can be used to access the 
theorem provers.  The module contains a method ``attempt_proof()`` that takes 
an ``Expression`` and, optionally, a name of a theorem prover.  The default is 
``'Prover9'`` , but the tableau prover may be used by specifying ``'tableau'``.


    >>> from nltk_contrib import theorem_prover as TP
    >>> from nltk_contrib.drt import DRT
    >>> f = DRT.Parser().parse('drs([],[(drs([],[(man x)]) implies drs([],[(man x)]))])').toFol()
    >>> print f
    (implies (man x) (man x))
    >>> TP.Prover9(f).prove()
    True


-------
Prover9
-------

Prover9 Installation
~~~~~~~~~~~~~~~~~~~~

You can download Prover9 from http://www.cs.unm.edu/~mccune/prover9/.

.. Extract the source code into '/usr/share/nltk/tools/prover/'.

Extract the source code into a suitable directory and follow the
instructions in the ``README.make`` file to compile the executables.
Install these into an appropriate location. To see where NLTK's
``theorem_prover`` module will look by default on a Unix-like system, you can
inspect the ``_prover9_search`` variable:

    >>> TP.prover9_search
    ['.', '/usr/local/bin/prover9', '/usr/local/bin/prover9/bin', '/usr/local/bin', '/usr/bin', '/usr/local/prover9', '/usr/local/share/prover9']

In order to make sure that NLTK has successfully located Prover9, use the
``config_prover9()`` function.

    >>> TP.config_prover9()
    [Found Prover9: /usr/local/bin/prover9]

You can also give an explicit path to this function:

    >>> TP.config_prover9('/usr/local/bin')
    [Found Prover9: /usr/local/bin/prover9]

..   zap the global variable

      >>> TP.prover9_path = None

If ``config_prover9()`` fails to find the Prover9 executable, for
example if the explicitly supplied path is incorrect, it will raise an error.

    >>> TP.config_prover9('/nonexistent/path')    
    Traceback (most recent call last):
      . . .
    LookupError: Unable to find Prover9 executable in '/nonexistent/path'
    Use 'config_prover9(path=<path>) ', or set the PROVER9HOME environment variable to a valid path.

Using Prover9
~~~~~~~~~~~~~

    >>> from nltk.sem import LogicParser
    >>> g = LogicParser().parse('((man x) iff (not (not (man x))))')
    >>> print TP.Prover9(g).prove()
    True
    >>> g = LogicParser().parse('all x. ((man x) implies (man x))')
    >>> prover = TP.Prover9(g)
    >>> print prover.prove()
    True



The command ``prover.show_proof()`` will print out the
extensive proof information provided by Prover9, shown in abbreviated
form here::

    ============================== Prover9 ===============================
    Prover9 (32) version Dec-2007, Dec 2007.
    Process 6317 was started by ewan on isalpha.local,
    Mon Jan 21 15:23:28 2008
    The command was "/usr/local/bin/prover9 -f /var/...

    ============================== end of head ===========================
    <BLANKLINE>
    ============================== INPUT =================================
    <BLANKLINE>
    % Reading from file /var/...
    <BLANKLINE>
    <BLANKLINE>
    formulas(goals).
    (all x (man(x) -> man(x))).
    end_of_list.

    ...
    ============================== end of search =========================
    <BLANKLINE>
    THEOREM PROVED
    <BLANKLINE>
    Exiting with 1 proof.
    <BLANKLINE>
    Process 6317 exit (max_proofs) Mon Jan 21 15:23:28 2008

    >>> g = LogicParser().parse('(mortal Socrates)')
    >>> prover = TP.Prover9(g)
    >>> print prover.prove()
    False
    >>> a1 = LogicParser().parse('all x.((man x) implies (mortal x))')
    >>> a2 = LogicParser().parse('(man Socrates)')
    >>> prover.add_assumptions([a1, a2])
    >>> print prover.prove()
    True


------------
DRS Equality
------------

One application of the theorem prover functionality is to check if
two Discourse Representation Structures (DRSs) have the same meaning.
The ``tp_equals()`` method calls Prover9 to determine whether (the
FOL versions of) two DRSs are logically equivalent.

    >>> from nltk_contrib.drt import DRT
    >>> a = DRT.Parser().parse(r'drs([x],[(man x), (walks x)])')
    >>> b = DRT.Parser().parse(r'drs([x],[(walks x), (man x)])')
    >>> print a.tp_equals(b)
    True

Checking for equality of two DRSs is very useful when generating readings of a sentence.
For example, the ``drt_glue`` module generates two readings for the sentence 
*John sees Mary*:

    >>> from nltk_contrib.gluesemantics import drt_glue
    >>> readings = drt_glue.parse_to_meaning('John sees Mary')
    >>> 
    >>> for drs in readings: print drs.simplify()
    ...
    DRS([z1,x],[(= z1 John),(= x Mary),(sees z1 x)])
    DRS([z2,x],[(= z2 Mary),(= x John),(sees x z2)])

However, it is easy to tell that these two readings are logically the
same, and therefore one of them is superfluous.  We can use the theorem prover
to determine this equivalence, and then delete one of them.

    >>> readings[0].tp_equals(readings[1])
    True

