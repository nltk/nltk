=========
 Parsing
=========

Unit tests for the Context Free Grammar class
---------------------------------------------

    >>> from nltk import Nonterminal, nonterminals, Production, parse_cfg, ContextFreeGrammar

    >>> nt1 = Nonterminal('NP')
    >>> nt2 = Nonterminal('VP')

    >>> nt1.symbol()
    'NP'

    >>> nt1 == Nonterminal('NP')
    True

    >>> nt1 == nt2
    False

    >>> S, NP, VP, PP = nonterminals('S, NP, VP, PP')
    >>> N, V, P, DT = nonterminals('N, V, P, DT') 

    >>> prod1 = Production(S, [NP, VP])
    >>> prod2 = Production(NP, [DT, NP])

    >>> prod1.lhs()
    S

    >>> prod1.rhs()
    (NP, VP)

    >>> prod1 == Production(S, [NP, VP])
    True

    >>> prod1 == prod2
    False

    >>> grammar = parse_cfg("""
    ... S -> NP VP
    ... PP -> P NP
    ... NP -> DT N | N PP | DT N PP
    ... VP -> V NP | V PP | V NP PP
    ... DT -> 'a'
    ... DT -> 'the'
    ... N -> 'cat'
    ... N -> 'dog'
    ... N -> 'rug'
    ... V -> 'chased'
    ... V -> 'sat'
    ... P -> 'in'
    ... P -> 'on'
    ... """)

Unit tests for the rd (Recursive Descent Parser) class
------------------------------------------------------

Create and run a recursive descent parser over both a syntactically ambiguous
and unambiguous sentence.

    >>> from nltk.parse import RecursiveDescentParser
    >>> rd = RecursiveDescentParser(grammar)

    >>> sentence1 = 'the cat chased the dog'.split()
    >>> sentence2 = 'the cat chased the dog on the rug'.split()

    >>> for t in rd.nbest_parse(sentence1):
    ...     print t
    (S (NP (DT the) (N cat)) (VP (V chased) (NP (DT the) (N dog))))

    >>> for t in rd.nbest_parse(sentence2):
    ...     print t
    (S
      (NP (DT the) (N cat))
      (VP
        (V chased)
        (NP (DT the) (N dog) (PP (P on) (NP (DT the) (N rug))))))
    (S
      (NP (DT the) (N cat))
      (VP
        (V chased)
        (NP (DT the) (N dog))
        (PP (P on) (NP (DT the) (N rug)))))


(dolist (expr doctest-font-lock-keywords)
  (add-to-list 'font-lock-keywords expr))

  font-lock-keywords
(add-to-list 'font-lock-keywords
  (car doctest-font-lock-keywords))

        
Unit tests for the sr (Shift Reduce Parser) class
-------------------------------------------------

Create and run a shift reduce parser over both a syntactically ambiguous
and unambiguous sentence. Note that unlike the recursive descent parser, one
and only one parse is ever returned.

    >>> from nltk.parse import ShiftReduceParser
    >>> sr = ShiftReduceParser(grammar)

    >>> sentence1 = 'the cat chased the dog'.split()
    >>> sentence2 = 'the cat chased the dog on the rug'.split()

    >>> for t in sr.nbest_parse(sentence1):
    ...     print t
    (S (NP (DT the) (N cat)) (VP (V chased) (NP (DT the) (N dog))))


The shift reduce parser uses heuristics to decide what to do when there are
multiple possible shift or reduce operations available - for the supplied
grammar clearly the wrong operation is selected.

    >>> for t in sr.nbest_parse(sentence2):
    ...     print t

Unit tests for the Chart parser class
-------------------------------------

We use the demo() function for testing.
We must turn off showing of times.

    >>> import nltk

Top-down

    >>> nltk.parse.chart.demo(1, should_print_times=False, trace=1)
    * Sentence:
    I saw John with a dog with my cookie
    ['I', 'saw', 'John', 'with', 'a', 'dog', 'with', 'my', 'cookie']
    <BLANKLINE>
    * Strategy: Top-down
    <BLANKLINE>
    |. I  .saw .John.with. a  .dog .with. my .cook.|
    |>    .    .    .    .    .    .    .    .    .| [0:0] S  -> * NP VP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * Det N
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * NP PP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * 'John'
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * 'I'
    |[----]    .    .    .    .    .    .    .    .| [0:1] 'I'
    |[----]    .    .    .    .    .    .    .    .| [0:1] NP -> 'I' *
    |[---->    .    .    .    .    .    .    .    .| [0:1] S  -> NP * VP
    |[---->    .    .    .    .    .    .    .    .| [0:1] NP -> NP * PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] PP -> * P NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] P  -> * 'with'
    |.    >    .    .    .    .    .    .    .    .| [1:1] P  -> * 'under'
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * VP PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V
    |.    >    .    .    .    .    .    .    .    .| [1:1] V  -> * 'ate'
    |.    >    .    .    .    .    .    .    .    .| [1:1] V  -> * 'saw'
    |.    [----]    .    .    .    .    .    .    .| [1:2] 'saw'
    |.    [----]    .    .    .    .    .    .    .| [1:2] V  -> 'saw' *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> V * NP
    |.    [----]    .    .    .    .    .    .    .| [1:2] VP -> V *
    |[---------]    .    .    .    .    .    .    .| [0:2] S  -> NP VP *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> VP * PP
    |.    .    >    .    .    .    .    .    .    .| [2:2] PP -> * P NP
    |.    .    >    .    .    .    .    .    .    .| [2:2] P  -> * 'with'
    |.    .    >    .    .    .    .    .    .    .| [2:2] P  -> * 'under'
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * Det N
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * NP PP
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * 'John'
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * 'I'
    |.    .    [----]    .    .    .    .    .    .| [2:3] 'John'
    |.    .    [----]    .    .    .    .    .    .| [2:3] NP -> 'John' *
    |.    [---------]    .    .    .    .    .    .| [1:3] VP -> V NP *
    |.    .    [---->    .    .    .    .    .    .| [2:3] NP -> NP * PP
    |.    .    .    >    .    .    .    .    .    .| [3:3] PP -> * P NP
    |.    .    .    >    .    .    .    .    .    .| [3:3] P  -> * 'with'
    |.    .    .    >    .    .    .    .    .    .| [3:3] P  -> * 'under'
    |.    .    .    [----]    .    .    .    .    .| [3:4] 'with'
    |.    .    .    [----]    .    .    .    .    .| [3:4] P  -> 'with' *
    |.    .    .    [---->    .    .    .    .    .| [3:4] PP -> P * NP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * Det N
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * NP PP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * 'John'
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * 'I'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'the'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'my'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'a'
    |.    .    .    .    [----]    .    .    .    .| [4:5] 'a'
    |.    .    .    .    [----]    .    .    .    .| [4:5] Det -> 'a' *
    |.    .    .    .    [---->    .    .    .    .| [4:5] NP -> Det * N
    |.    .    .    .    .    >    .    .    .    .| [5:5] N  -> * 'dog'
    |.    .    .    .    .    >    .    .    .    .| [5:5] N  -> * 'cookie'
    |.    .    .    .    .    [----]    .    .    .| [5:6] 'dog'
    |.    .    .    .    .    [----]    .    .    .| [5:6] N  -> 'dog' *
    |.    .    .    .    [---------]    .    .    .| [4:6] NP -> Det N *
    |.    .    .    [--------------]    .    .    .| [3:6] PP -> P NP *
    |.    .    .    .    [--------->    .    .    .| [4:6] NP -> NP * PP
    |.    .    .    .    .    .    >    .    .    .| [6:6] PP -> * P NP
    |.    .    .    .    .    .    >    .    .    .| [6:6] P  -> * 'with'
    |.    .    .    .    .    .    >    .    .    .| [6:6] P  -> * 'under'
    |.    .    .    .    .    .    [----]    .    .| [6:7] 'with'
    |.    .    .    .    .    .    [----]    .    .| [6:7] P  -> 'with' *
    |.    .    .    .    .    .    [---->    .    .| [6:7] PP -> P * NP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * Det N
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * NP PP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * 'John'
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * 'I'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'the'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'my'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'a'
    |.    .    .    .    .    .    .    [----]    .| [7:8] 'my'
    |.    .    .    .    .    .    .    [----]    .| [7:8] Det -> 'my' *
    |.    .    .    .    .    .    .    [---->    .| [7:8] NP -> Det * N
    |.    .    .    .    .    .    .    .    >    .| [8:8] N  -> * 'dog'
    |.    .    .    .    .    .    .    .    >    .| [8:8] N  -> * 'cookie'
    |.    .    .    .    .    .    .    .    [----]| [8:9] 'cookie'
    |.    .    .    .    .    .    .    .    [----]| [8:9] N  -> 'cookie' *
    |.    .    .    .    .    .    .    [---------]| [7:9] NP -> Det N *
    |.    .    .    .    .    .    [--------------]| [6:9] PP -> P NP *
    |.    .    .    .    .    .    .    [--------->| [7:9] NP -> NP * PP
    |.    .    .    .    .    .    .    .    .    >| [9:9] PP -> * P NP
    |.    .    .    .    .    .    .    .    .    >| [9:9] P  -> * 'with'
    |.    .    .    .    .    .    .    .    .    >| [9:9] P  -> * 'under'
    |.    .    .    .    [------------------------]| [4:9] NP -> NP PP *
    |.    .    .    [-----------------------------]| [3:9] PP -> P NP *
    |.    .    .    .    [------------------------>| [4:9] NP -> NP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    [---------------------------------------]| [1:9] VP -> V NP *
    |.    .    [---------------------------------->| [2:9] NP -> NP * PP
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    .    [-------------------]    .    .    .| [2:6] NP -> NP PP *
    |.    [------------------------]    .    .    .| [1:6] VP -> V NP *
    |.    .    [------------------->    .    .    .| [2:6] NP -> NP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |[--------------]    .    .    .    .    .    .| [0:3] S  -> NP VP *
    |.    [--------->    .    .    .    .    .    .| [1:3] VP -> VP * PP
    |.    [------------------------]    .    .    .| [1:6] VP -> VP PP *
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'the'
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'my'
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'a'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'the'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'my'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'a'
    (S
      (NP I)
      (VP
        (VP (VP (V saw) (NP John)) (PP (P with) (NP (Det a) (N dog))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP John))
        (PP
          (P with)
          (NP
            (NP (Det a) (N dog))
            (PP (P with) (NP (Det my) (N cookie)))))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP (NP John) (PP (P with) (NP (Det a) (N dog)))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP (NP John) (PP (P with) (NP (Det a) (N dog))))
          (PP (P with) (NP (Det my) (N cookie))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP John)
          (PP
            (P with)
            (NP
              (NP (Det a) (N dog))
              (PP (P with) (NP (Det my) (N cookie))))))))
    <BLANKLINE>

Bottom-up

    >>> nltk.parse.chart.demo(2, should_print_times=False, trace=1)
    * Sentence:
    I saw John with a dog with my cookie
    ['I', 'saw', 'John', 'with', 'a', 'dog', 'with', 'my', 'cookie']
    <BLANKLINE>
    * Strategy: Bottom-up
    <BLANKLINE>
    |. I  .saw .John.with. a  .dog .with. my .cook.|
    |[----]    .    .    .    .    .    .    .    .| [0:1] 'I'
    |.    [----]    .    .    .    .    .    .    .| [1:2] 'saw'
    |.    .    [----]    .    .    .    .    .    .| [2:3] 'John'
    |.    .    .    [----]    .    .    .    .    .| [3:4] 'with'
    |.    .    .    .    [----]    .    .    .    .| [4:5] 'a'
    |.    .    .    .    .    [----]    .    .    .| [5:6] 'dog'
    |.    .    .    .    .    .    [----]    .    .| [6:7] 'with'
    |.    .    .    .    .    .    .    [----]    .| [7:8] 'my'
    |.    .    .    .    .    .    .    .    [----]| [8:9] 'cookie'
    |.    .    .    .    .    .    .    .    >    .| [8:8] N  -> * 'cookie'
    |.    .    .    .    .    .    .    .    [----]| [8:9] N  -> 'cookie' *
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'my'
    |.    .    .    .    .    .    .    [----]    .| [7:8] Det -> 'my' *
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * Det N
    |.    .    .    .    .    .    .    [---->    .| [7:8] NP -> Det * N
    |.    .    .    .    .    .    .    [---------]| [7:9] NP -> Det N *
    |.    .    .    .    .    .    .    >    .    .| [7:7] S  -> * NP VP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * NP PP
    |.    .    .    .    .    .    .    [--------->| [7:9] S  -> NP * VP
    |.    .    .    .    .    .    .    [--------->| [7:9] NP -> NP * PP
    |.    .    .    .    .    .    >    .    .    .| [6:6] P  -> * 'with'
    |.    .    .    .    .    .    [----]    .    .| [6:7] P  -> 'with' *
    |.    .    .    .    .    .    >    .    .    .| [6:6] PP -> * P NP
    |.    .    .    .    .    .    [---->    .    .| [6:7] PP -> P * NP
    |.    .    .    .    .    .    [--------------]| [6:9] PP -> P NP *
    |.    .    .    .    .    >    .    .    .    .| [5:5] N  -> * 'dog'
    |.    .    .    .    .    [----]    .    .    .| [5:6] N  -> 'dog' *
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'a'
    |.    .    .    .    [----]    .    .    .    .| [4:5] Det -> 'a' *
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * Det N
    |.    .    .    .    [---->    .    .    .    .| [4:5] NP -> Det * N
    |.    .    .    .    [---------]    .    .    .| [4:6] NP -> Det N *
    |.    .    .    .    >    .    .    .    .    .| [4:4] S  -> * NP VP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * NP PP
    |.    .    .    .    [--------->    .    .    .| [4:6] S  -> NP * VP
    |.    .    .    .    [--------->    .    .    .| [4:6] NP -> NP * PP
    |.    .    .    .    [------------------------]| [4:9] NP -> NP PP *
    |.    .    .    .    [------------------------>| [4:9] S  -> NP * VP
    |.    .    .    .    [------------------------>| [4:9] NP -> NP * PP
    |.    .    .    >    .    .    .    .    .    .| [3:3] P  -> * 'with'
    |.    .    .    [----]    .    .    .    .    .| [3:4] P  -> 'with' *
    |.    .    .    >    .    .    .    .    .    .| [3:3] PP -> * P NP
    |.    .    .    [---->    .    .    .    .    .| [3:4] PP -> P * NP
    |.    .    .    [--------------]    .    .    .| [3:6] PP -> P NP *
    |.    .    .    [-----------------------------]| [3:9] PP -> P NP *
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * 'John'
    |.    .    [----]    .    .    .    .    .    .| [2:3] NP -> 'John' *
    |.    .    >    .    .    .    .    .    .    .| [2:2] S  -> * NP VP
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * NP PP
    |.    .    [---->    .    .    .    .    .    .| [2:3] S  -> NP * VP
    |.    .    [---->    .    .    .    .    .    .| [2:3] NP -> NP * PP
    |.    .    [-------------------]    .    .    .| [2:6] NP -> NP PP *
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    .    [---------------------------------->| [2:9] S  -> NP * VP
    |.    .    [---------------------------------->| [2:9] NP -> NP * PP
    |.    .    [------------------->    .    .    .| [2:6] S  -> NP * VP
    |.    .    [------------------->    .    .    .| [2:6] NP -> NP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    >    .    .    .    .    .    .    .    .| [1:1] V  -> * 'saw'
    |.    [----]    .    .    .    .    .    .    .| [1:2] V  -> 'saw' *
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> V * NP
    |.    [----]    .    .    .    .    .    .    .| [1:2] VP -> V *
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * VP PP
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> VP * PP
    |.    [---------]    .    .    .    .    .    .| [1:3] VP -> V NP *
    |.    [------------------------]    .    .    .| [1:6] VP -> V NP *
    |.    [---------------------------------------]| [1:9] VP -> V NP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [--------->    .    .    .    .    .    .| [1:3] VP -> VP * PP
    |.    [------------------------]    .    .    .| [1:6] VP -> VP PP *
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * 'I'
    |[----]    .    .    .    .    .    .    .    .| [0:1] NP -> 'I' *
    |>    .    .    .    .    .    .    .    .    .| [0:0] S  -> * NP VP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * NP PP
    |[---->    .    .    .    .    .    .    .    .| [0:1] S  -> NP * VP
    |[---->    .    .    .    .    .    .    .    .| [0:1] NP -> NP * PP
    |[---------]    .    .    .    .    .    .    .| [0:2] S  -> NP VP *
    |[--------------]    .    .    .    .    .    .| [0:3] S  -> NP VP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |[============================================]| [0:9] S  -> NP VP *
    |[============================================]| [0:9] S  -> NP VP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    (S
      (NP I)
      (VP
        (VP (VP (V saw) (NP John)) (PP (P with) (NP (Det a) (N dog))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP John))
        (PP
          (P with)
          (NP
            (NP (Det a) (N dog))
            (PP (P with) (NP (Det my) (N cookie)))))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP (NP John) (PP (P with) (NP (Det a) (N dog)))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP (NP John) (PP (P with) (NP (Det a) (N dog))))
          (PP (P with) (NP (Det my) (N cookie))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP John)
          (PP
            (P with)
            (NP
              (NP (Det a) (N dog))
              (PP (P with) (NP (Det my) (N cookie))))))))
    <BLANKLINE>

Bottom-up combine

    >>> nltk.parse.chart.demo(3, should_print_times=False, trace=1)
    * Sentence:
    I saw John with a dog with my cookie
    ['I', 'saw', 'John', 'with', 'a', 'dog', 'with', 'my', 'cookie']
    <BLANKLINE>
    * Strategy: Bottom-up combine
    <BLANKLINE>
    |. I  .saw .John.with. a  .dog .with. my .cook.|
    |[----]    .    .    .    .    .    .    .    .| [0:1] 'I'
    |.    [----]    .    .    .    .    .    .    .| [1:2] 'saw'
    |.    .    [----]    .    .    .    .    .    .| [2:3] 'John'
    |.    .    .    [----]    .    .    .    .    .| [3:4] 'with'
    |.    .    .    .    [----]    .    .    .    .| [4:5] 'a'
    |.    .    .    .    .    [----]    .    .    .| [5:6] 'dog'
    |.    .    .    .    .    .    [----]    .    .| [6:7] 'with'
    |.    .    .    .    .    .    .    [----]    .| [7:8] 'my'
    |.    .    .    .    .    .    .    .    [----]| [8:9] 'cookie'
    |.    .    .    .    .    .    .    .    [----]| [8:9] N  -> 'cookie' *
    |.    .    .    .    .    .    .    [----]    .| [7:8] Det -> 'my' *
    |.    .    .    .    .    .    .    [---->    .| [7:8] NP -> Det * N
    |.    .    .    .    .    .    .    [---------]| [7:9] NP -> Det N *
    |.    .    .    .    .    .    .    [--------->| [7:9] S  -> NP * VP
    |.    .    .    .    .    .    .    [--------->| [7:9] NP -> NP * PP
    |.    .    .    .    .    .    [----]    .    .| [6:7] P  -> 'with' *
    |.    .    .    .    .    .    [---->    .    .| [6:7] PP -> P * NP
    |.    .    .    .    .    .    [--------------]| [6:9] PP -> P NP *
    |.    .    .    .    .    [----]    .    .    .| [5:6] N  -> 'dog' *
    |.    .    .    .    [----]    .    .    .    .| [4:5] Det -> 'a' *
    |.    .    .    .    [---->    .    .    .    .| [4:5] NP -> Det * N
    |.    .    .    .    [---------]    .    .    .| [4:6] NP -> Det N *
    |.    .    .    .    [--------->    .    .    .| [4:6] S  -> NP * VP
    |.    .    .    .    [--------->    .    .    .| [4:6] NP -> NP * PP
    |.    .    .    .    [------------------------]| [4:9] NP -> NP PP *
    |.    .    .    .    [------------------------>| [4:9] S  -> NP * VP
    |.    .    .    .    [------------------------>| [4:9] NP -> NP * PP
    |.    .    .    [----]    .    .    .    .    .| [3:4] P  -> 'with' *
    |.    .    .    [---->    .    .    .    .    .| [3:4] PP -> P * NP
    |.    .    .    [--------------]    .    .    .| [3:6] PP -> P NP *
    |.    .    .    [-----------------------------]| [3:9] PP -> P NP *
    |.    .    [----]    .    .    .    .    .    .| [2:3] NP -> 'John' *
    |.    .    [---->    .    .    .    .    .    .| [2:3] S  -> NP * VP
    |.    .    [---->    .    .    .    .    .    .| [2:3] NP -> NP * PP
    |.    .    [-------------------]    .    .    .| [2:6] NP -> NP PP *
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    .    [---------------------------------->| [2:9] S  -> NP * VP
    |.    .    [---------------------------------->| [2:9] NP -> NP * PP
    |.    .    [------------------->    .    .    .| [2:6] S  -> NP * VP
    |.    .    [------------------->    .    .    .| [2:6] NP -> NP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    [----]    .    .    .    .    .    .    .| [1:2] V  -> 'saw' *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> V * NP
    |.    [----]    .    .    .    .    .    .    .| [1:2] VP -> V *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> VP * PP
    |.    [---------]    .    .    .    .    .    .| [1:3] VP -> V NP *
    |.    [------------------------]    .    .    .| [1:6] VP -> V NP *
    |.    [---------------------------------------]| [1:9] VP -> V NP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [--------->    .    .    .    .    .    .| [1:3] VP -> VP * PP
    |.    [------------------------]    .    .    .| [1:6] VP -> VP PP *
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |[----]    .    .    .    .    .    .    .    .| [0:1] NP -> 'I' *
    |[---->    .    .    .    .    .    .    .    .| [0:1] S  -> NP * VP
    |[---->    .    .    .    .    .    .    .    .| [0:1] NP -> NP * PP
    |[---------]    .    .    .    .    .    .    .| [0:2] S  -> NP VP *
    |[--------------]    .    .    .    .    .    .| [0:3] S  -> NP VP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |[============================================]| [0:9] S  -> NP VP *
    |[============================================]| [0:9] S  -> NP VP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    (S
      (NP I)
      (VP
        (VP (VP (V saw) (NP John)) (PP (P with) (NP (Det a) (N dog))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP John))
        (PP
          (P with)
          (NP
            (NP (Det a) (N dog))
            (PP (P with) (NP (Det my) (N cookie)))))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP (NP John) (PP (P with) (NP (Det a) (N dog)))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP (NP John) (PP (P with) (NP (Det a) (N dog))))
          (PP (P with) (NP (Det my) (N cookie))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP John)
          (PP
            (P with)
            (NP
              (NP (Det a) (N dog))
              (PP (P with) (NP (Det my) (N cookie))))))))
    <BLANKLINE>

Earley strategy

    >>> nltk.parse.chart.demo(4, should_print_times=False, trace=1)
    * Sentence:
    I saw John with a dog with my cookie
    ['I', 'saw', 'John', 'with', 'a', 'dog', 'with', 'my', 'cookie']
    <BLANKLINE>
    * Strategy: Earley
    <BLANKLINE>
    |. I  .saw .John.with. a  .dog .with. my .cook.|
    |>    .    .    .    .    .    .    .    .    .| [0:0] S  -> * NP VP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * Det N
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * NP PP
    |[----]    .    .    .    .    .    .    .    .| [0:1] 'I'
    |[----]    .    .    .    .    .    .    .    .| [0:1] NP -> 'I' *
    |[---->    .    .    .    .    .    .    .    .| [0:1] S  -> NP * VP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * VP PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V
    |.    [----]    .    .    .    .    .    .    .| [1:2] 'saw'
    |.    [----]    .    .    .    .    .    .    .| [1:2] V  -> 'saw' *
    |.    [----]    .    .    .    .    .    .    .| [1:2] VP -> V *
    |[---------]    .    .    .    .    .    .    .| [0:2] S  -> NP VP *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> VP * PP
    |.    .    >    .    .    .    .    .    .    .| [2:2] PP -> * P NP
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> V * NP
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * Det N
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * NP PP
    |.    .    [----]    .    .    .    .    .    .| [2:3] 'John'
    |.    .    [----]    .    .    .    .    .    .| [2:3] NP -> 'John' *
    |.    [---------]    .    .    .    .    .    .| [1:3] VP -> V NP *
    |[--------------]    .    .    .    .    .    .| [0:3] S  -> NP VP *
    |.    [--------->    .    .    .    .    .    .| [1:3] VP -> VP * PP
    |.    .    .    >    .    .    .    .    .    .| [3:3] PP -> * P NP
    |.    .    .    [----]    .    .    .    .    .| [3:4] 'with'
    |.    .    .    [----]    .    .    .    .    .| [3:4] P  -> 'with' *
    |.    .    .    [---->    .    .    .    .    .| [3:4] PP -> P * NP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * Det N
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * NP PP
    |.    .    .    .    [----]    .    .    .    .| [4:5] 'a'
    |.    .    .    .    [----]    .    .    .    .| [4:5] Det -> 'a' *
    |.    .    .    .    [---->    .    .    .    .| [4:5] NP -> Det * N
    |.    .    .    .    .    [----]    .    .    .| [5:6] 'dog'
    |.    .    .    .    .    [----]    .    .    .| [5:6] N  -> 'dog' *
    |.    .    .    .    [---------]    .    .    .| [4:6] NP -> Det N *
    |.    .    .    [--------------]    .    .    .| [3:6] PP -> P NP *
    |.    .    .    .    [--------->    .    .    .| [4:6] NP -> NP * PP
    |.    .    .    .    .    .    >    .    .    .| [6:6] PP -> * P NP
    |.    .    .    .    .    .    [----]    .    .| [6:7] 'with'
    |.    .    .    .    .    .    [----]    .    .| [6:7] P  -> 'with' *
    |.    .    .    .    .    .    [---->    .    .| [6:7] PP -> P * NP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * Det N
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * NP PP
    |.    .    .    .    .    .    .    [----]    .| [7:8] 'my'
    |.    .    .    .    .    .    .    [----]    .| [7:8] Det -> 'my' *
    |.    .    .    .    .    .    .    [---->    .| [7:8] NP -> Det * N
    |.    .    .    .    .    .    .    .    [----]| [8:9] 'cookie'
    |.    .    .    .    .    .    .    .    [----]| [8:9] N  -> 'cookie' *
    |.    .    .    .    .    .    .    [---------]| [7:9] NP -> Det N *
    |.    .    .    .    .    .    [--------------]| [6:9] PP -> P NP *
    |.    .    .    .    .    .    .    [--------->| [7:9] NP -> NP * PP
    |.    .    .    .    .    .    .    .    .    >| [9:9] PP -> * P NP
    |.    .    .    .    [------------------------]| [4:9] NP -> NP PP *
    |.    .    .    [-----------------------------]| [3:9] PP -> P NP *
    |.    .    .    .    [------------------------>| [4:9] NP -> NP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [------------------------]    .    .    .| [1:6] VP -> VP PP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    .    [---->    .    .    .    .    .    .| [2:3] NP -> NP * PP
    |.    .    [-------------------]    .    .    .| [2:6] NP -> NP PP *
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    [---------------------------------------]| [1:9] VP -> V NP *
    |.    .    [---------------------------------->| [2:9] NP -> NP * PP
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |.    [------------------------]    .    .    .| [1:6] VP -> V NP *
    |.    .    [------------------->    .    .    .| [2:6] NP -> NP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |[---->    .    .    .    .    .    .    .    .| [0:1] NP -> NP * PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] PP -> * P NP
    (S
      (NP I)
      (VP
        (VP (VP (V saw) (NP John)) (PP (P with) (NP (Det a) (N dog))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP (NP John) (PP (P with) (NP (Det a) (N dog)))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP John))
        (PP
          (P with)
          (NP
            (NP (Det a) (N dog))
            (PP (P with) (NP (Det my) (N cookie)))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP (NP John) (PP (P with) (NP (Det a) (N dog))))
          (PP (P with) (NP (Det my) (N cookie))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP John)
          (PP
            (P with)
            (NP
              (NP (Det a) (N dog))
              (PP (P with) (NP (Det my) (N cookie))))))))
    <BLANKLINE>

The stepping chart parser

    >>> nltk.parse.chart.demo(5, should_print_times=False, trace=1)
    * Sentence:
    I saw John with a dog with my cookie
    ['I', 'saw', 'John', 'with', 'a', 'dog', 'with', 'my', 'cookie']
    <BLANKLINE>
    * Strategy: Stepping (top-down vs bottom-up)
    <BLANKLINE>
    *** SWITCH TO TOP DOWN
    |>    .    .    .    .    .    .    .    .    .| [0:0] S  -> * NP VP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * Det N
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * NP PP
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * 'John'
    |>    .    .    .    .    .    .    .    .    .| [0:0] NP -> * 'I'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'the'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'my'
    |>    .    .    .    .    .    .    .    .    .| [0:0] Det -> * 'a'
    |[----]    .    .    .    .    .    .    .    .| [0:1] 'I'
    |[----]    .    .    .    .    .    .    .    .| [0:1] NP -> 'I' *
    |[---->    .    .    .    .    .    .    .    .| [0:1] S  -> NP * VP
    |[---->    .    .    .    .    .    .    .    .| [0:1] NP -> NP * PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * VP PP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] VP -> * V
    |.    >    .    .    .    .    .    .    .    .| [1:1] PP -> * P NP
    |.    >    .    .    .    .    .    .    .    .| [1:1] V  -> * 'ate'
    |.    >    .    .    .    .    .    .    .    .| [1:1] V  -> * 'saw'
    |.    >    .    .    .    .    .    .    .    .| [1:1] P  -> * 'with'
    |.    >    .    .    .    .    .    .    .    .| [1:1] P  -> * 'under'
    |.    [----]    .    .    .    .    .    .    .| [1:2] 'saw'
    |.    [----]    .    .    .    .    .    .    .| [1:2] V  -> 'saw' *
    *** SWITCH TO BOTTOM UP
    |.    .    [----]    .    .    .    .    .    .| [2:3] 'John'
    |.    .    .    [----]    .    .    .    .    .| [3:4] 'with'
    |.    .    .    .    [----]    .    .    .    .| [4:5] 'a'
    |.    .    .    .    .    [----]    .    .    .| [5:6] 'dog'
    |.    .    .    .    .    .    [----]    .    .| [6:7] 'with'
    |.    .    .    .    .    .    .    [----]    .| [7:8] 'my'
    |.    .    .    .    .    .    .    .    [----]| [8:9] 'cookie'
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * 'John'
    |.    .    .    >    .    .    .    .    .    .| [3:3] P  -> * 'with'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'a'
    |.    .    .    .    .    >    .    .    .    .| [5:5] N  -> * 'dog'
    |.    .    .    .    .    .    >    .    .    .| [6:6] P  -> * 'with'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'my'
    |.    .    .    .    .    .    .    .    >    .| [8:8] N  -> * 'cookie'
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> V * NP
    |.    [----]    .    .    .    .    .    .    .| [1:2] VP -> V *
    |.    .    [----]    .    .    .    .    .    .| [2:3] NP -> 'John' *
    |.    .    .    [----]    .    .    .    .    .| [3:4] P  -> 'with' *
    |.    .    .    .    [----]    .    .    .    .| [4:5] Det -> 'a' *
    |.    .    .    .    .    [----]    .    .    .| [5:6] N  -> 'dog' *
    |.    .    .    .    .    .    [----]    .    .| [6:7] P  -> 'with' *
    |.    .    .    .    .    .    .    [----]    .| [7:8] Det -> 'my' *
    *** SWITCH TO TOP DOWN
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * Det N
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * NP PP
    |.    .    >    .    .    .    .    .    .    .| [2:2] NP -> * 'I'
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'the'
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'my'
    |.    .    >    .    .    .    .    .    .    .| [2:2] Det -> * 'a'
    |[---------]    .    .    .    .    .    .    .| [0:2] S  -> NP VP *
    |.    [---->    .    .    .    .    .    .    .| [1:2] VP -> VP * PP
    |.    .    .    .    .    .    .    .    [----]| [8:9] N  -> 'cookie' *
    |.    [---------]    .    .    .    .    .    .| [1:3] VP -> V NP *
    |.    .    [---->    .    .    .    .    .    .| [2:3] NP -> NP * PP
    |[--------------]    .    .    .    .    .    .| [0:3] S  -> NP VP *
    |.    [--------->    .    .    .    .    .    .| [1:3] VP -> VP * PP
    |.    .    >    .    .    .    .    .    .    .| [2:2] PP -> * P NP
    |.    .    .    >    .    .    .    .    .    .| [3:3] PP -> * P NP
    |.    .    >    .    .    .    .    .    .    .| [2:2] P  -> * 'with'
    |.    .    >    .    .    .    .    .    .    .| [2:2] P  -> * 'under'
    |.    .    .    >    .    .    .    .    .    .| [3:3] P  -> * 'under'
    |.    .    .    [---->    .    .    .    .    .| [3:4] PP -> P * NP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * Det N
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * NP PP
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * 'John'
    *** SWITCH TO BOTTOM UP
    |.    .    >    .    .    .    .    .    .    .| [2:2] S  -> * NP VP
    |.    .    .    .    .    .    >    .    .    .| [6:6] PP -> * P NP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * Det N
    |.    .    [---->    .    .    .    .    .    .| [2:3] S  -> NP * VP
    |.    .    .    .    [---->    .    .    .    .| [4:5] NP -> Det * N
    |.    .    .    .    [---------]    .    .    .| [4:6] NP -> Det N *
    |.    .    .    .    .    .    [---->    .    .| [6:7] PP -> P * NP
    |.    .    .    .    .    .    .    [---->    .| [7:8] NP -> Det * N
    |.    .    .    .    .    .    .    [---------]| [7:9] NP -> Det N *
    |.    .    .    [--------------]    .    .    .| [3:6] PP -> P NP *
    |.    .    .    .    [--------->    .    .    .| [4:6] NP -> NP * PP
    |.    .    .    .    .    .    [--------------]| [6:9] PP -> P NP *
    |.    .    [-------------------]    .    .    .| [2:6] NP -> NP PP *
    |.    [------------------------]    .    .    .| [1:6] VP -> VP PP *
    |.    .    .    .    [------------------------]| [4:9] NP -> NP PP *
    |.    [------------------------]    .    .    .| [1:6] VP -> V NP *
    |.    .    [------------------->    .    .    .| [2:6] NP -> NP * PP
    |.    .    [------------------->    .    .    .| [2:6] S  -> NP * VP
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    .    .    [-----------------------------]| [3:9] PP -> P NP *
    |.    .    .    .    [------------------------>| [4:9] NP -> NP * PP
    *** SWITCH TO TOP DOWN
    |.    .    .    .    >    .    .    .    .    .| [4:4] NP -> * 'I'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'the'
    |.    .    .    .    >    .    .    .    .    .| [4:4] Det -> * 'my'
    |.    .    .    .    .    .    >    .    .    .| [6:6] P  -> * 'under'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'the'
    |.    .    .    .    .    .    .    >    .    .| [7:7] Det -> * 'a'
    |.    .    .    >    .    .    .    .    .    .| [3:3] VP -> * VP PP
    |.    .    .    >    .    .    .    .    .    .| [3:3] VP -> * V NP
    |.    .    .    >    .    .    .    .    .    .| [3:3] VP -> * V
    |.    .    .    .    .    >    .    .    .    .| [5:5] N  -> * 'cookie'
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * NP PP
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * 'John'
    |.    .    .    .    .    .    .    >    .    .| [7:7] NP -> * 'I'
    |.    .    .    .    .    .    .    .    >    .| [8:8] N  -> * 'dog'
    |.    .    .    .    .    .    >    .    .    .| [6:6] VP -> * VP PP
    |.    .    .    .    .    .    >    .    .    .| [6:6] VP -> * V NP
    |.    .    .    .    .    .    >    .    .    .| [6:6] VP -> * V
    |.    .    .    .    .    .    .    .    .    >| [9:9] PP -> * P NP
    |.    .    .    >    .    .    .    .    .    .| [3:3] V  -> * 'ate'
    |.    .    .    >    .    .    .    .    .    .| [3:3] V  -> * 'saw'
    |.    .    .    .    .    .    >    .    .    .| [6:6] V  -> * 'ate'
    |.    .    .    .    .    .    >    .    .    .| [6:6] V  -> * 'saw'
    *** SWITCH TO BOTTOM UP
    |.    .    .    .    >    .    .    .    .    .| [4:4] S  -> * NP VP
    |.    .    .    .    .    .    .    >    .    .| [7:7] S  -> * NP VP
    |[-----------------------------]    .    .    .| [0:6] S  -> NP VP *
    |.    [------------------------>    .    .    .| [1:6] VP -> VP * PP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    .    [---------------------------------->| [2:9] S  -> NP * VP
    |.    .    .    .    [--------->    .    .    .| [4:6] S  -> NP * VP
    |.    .    .    .    .    .    .    [--------->| [7:9] NP -> NP * PP
    |.    .    .    .    .    .    .    [--------->| [7:9] S  -> NP * VP
    |.    .    [----------------------------------]| [2:9] NP -> NP PP *
    |.    [---------------------------------------]| [1:9] VP -> VP PP *
    |.    .    .    .    [------------------------>| [4:9] S  -> NP * VP
    |.    [---------------------------------------]| [1:9] VP -> V NP *
    |.    .    [---------------------------------->| [2:9] NP -> NP * PP
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    |[============================================]| [0:9] S  -> NP VP *
    |.    [--------------------------------------->| [1:9] VP -> VP * PP
    *** SWITCH TO TOP DOWN
    |.    .    .    .    .    .    .    .    .    >| [9:9] P  -> * 'with'
    |.    .    .    .    .    .    .    .    .    >| [9:9] P  -> * 'under'
    |.    .    .    .    .    .    .    .    .    >| [9:9] VP -> * VP PP
    |.    .    .    .    .    .    .    .    .    >| [9:9] VP -> * V NP
    |.    .    .    .    .    .    .    .    .    >| [9:9] VP -> * V
    |.    .    .    .    .    .    .    .    .    >| [9:9] V  -> * 'ate'
    |.    .    .    .    .    .    .    .    .    >| [9:9] V  -> * 'saw'
    *** SWITCH TO BOTTOM UP
    *** SWITCH TO TOP DOWN
    *** SWITCH TO BOTTOM UP
    (S
      (NP I)
      (VP
        (VP (VP (V saw) (NP John)) (PP (P with) (NP (Det a) (N dog))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP (NP John) (PP (P with) (NP (Det a) (N dog)))))
        (PP (P with) (NP (Det my) (N cookie)))))
    (S
      (NP I)
      (VP
        (VP (V saw) (NP John))
        (PP
          (P with)
          (NP
            (NP (Det a) (N dog))
            (PP (P with) (NP (Det my) (N cookie)))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP (NP John) (PP (P with) (NP (Det a) (N dog))))
          (PP (P with) (NP (Det my) (N cookie))))))
    (S
      (NP I)
      (VP
        (V saw)
        (NP
          (NP John)
          (PP
            (P with)
            (NP
              (NP (Det a) (N dog))
              (PP (P with) (NP (Det my) (N cookie))))))))
    <BLANKLINE>


Unit tests for LARGE context-free grammars
------------------------------------------

Reading the ATIS grammar.

    >>> grammar = nltk.data.load('grammars/large_grammars/atis.cfg')
    >>> grammar
    <Grammar with 5517 productions>

Reading the test sentences.

    >>> sentences = nltk.data.load('grammars/large_grammars/atis_sentences.txt', format='raw')
    >>> sentences = nltk.parse.util.extract_test_sentences(sentences)
    >>> len(sentences)
    98
    >>> testsentence = sentences[22]
    >>> testsentence[0]
    ['show', 'me', 'northwest', 'flights', 'to', 'detroit', '.']
    >>> testsentence[1]
    17
    >>> sentence = testsentence[0]

Bottom-up parsing.

    >>> parser = nltk.parse.ChartParser(grammar, nltk.parse.BU_STRATEGY)
    >>> chart = parser.chart_parse(sentence)
    >>> print chart.num_edges()
    7661
    >>> print len(chart.parses(grammar.start()))
    17

Bottom-up combine parsing.

    >>> parser = nltk.parse.ChartParser(grammar, nltk.parse.BUC_STRATEGY)
    >>> chart = parser.chart_parse(sentence)
    >>> print chart.num_edges()
    4986
    >>> print len(chart.parses(grammar.start()))
    17

Top-down parsing.

    >>> parser = nltk.parse.ChartParser(grammar, nltk.parse.TD_STRATEGY)
    >>> chart = parser.chart_parse(sentence)
    >>> print chart.num_edges()
    35090
    >>> print len(chart.parses(grammar.start()))
    17

Earley parsing.

    >>> parser = nltk.parse.ChartParser(grammar, nltk.parse.EARLEY_STRATEGY)
    >>> chart = parser.chart_parse(sentence)
    >>> print chart.num_edges()
    28345
    >>> print len(chart.parses(grammar.start()))
    17


Unit tests for the Probabilistic CFG class
------------------------------------------

    >>> from nltk.corpus import treebank
    >>> from itertools import islice
    >>> from nltk import parse_pcfg, induce_pcfg, toy_pcfg1, toy_pcfg2

Create a set of probabilistic CFG productions.

    >>> grammar = parse_pcfg("""
    ... A -> B B [.3] | C B C [.7]
    ... B -> B D [.5] | C [.5]
    ... C -> 'a' [.1] | 'b' [0.9]
    ... D -> 'b' [1.0]
    ... """)
    >>> prod = grammar.productions()[0]
    >>> prod
    A -> B B [0.3]

    >>> prod.lhs()
    A

    >>> prod.rhs()
    (B, B)

    >>> prod.prob()
    0.29999999999999999

    >>> grammar.start()
    A

    >>> grammar.productions()
    [A -> B B [0.3], A -> C B C [0.7], B -> B D [0.5], B -> C [0.5], C -> 'a' [0.1], C -> 'b' [0.9], D -> 'b' [1.0]]

Induce some productions using parsed Treebank data.

    >>> productions = []
    >>> for fileid in treebank.fileids()[:2]:
    ...     for t in treebank.parsed_sents(fileid):
    ...         productions += t.productions()

    >>> grammar = induce_pcfg(S, productions)
    >>> grammar
    <Grammar with 71 productions>

    >>> grammar.productions()[:5]
    [PP -> IN NP [1.0], NNP -> 'Nov.' [0.0714285714286], NNP -> 'Agnew' [0.0714285714286], JJ -> 'industrial' [0.142857142857], NP -> CD NNS [0.133333333333]]

Unit tests for the Probabilistic Chart Parse classes
----------------------------------------------------

    >>> tokens = "Jack saw Bob with my cookie".split()
    >>> grammar = toy_pcfg2
    >>> print grammar
    Grammar with 23 productions (start state = S)
        S -> NP VP [1.0]
        VP -> V NP [0.59]
        VP -> V [0.4]
        VP -> VP PP [0.01]
        NP -> Det N [0.41]
        NP -> Name [0.28]
        NP -> NP PP [0.31]
        PP -> P NP [1.0]
        V -> 'saw' [0.21]
        V -> 'ate' [0.51]
        V -> 'ran' [0.28]
        N -> 'boy' [0.11]
        N -> 'cookie' [0.12]
        N -> 'table' [0.13]
        N -> 'telescope' [0.14]
        N -> 'hill' [0.5]
        Name -> 'Jack' [0.52]
        Name -> 'Bob' [0.48]
        P -> 'with' [0.61]
        P -> 'under' [0.39]
        Det -> 'the' [0.41]
        Det -> 'a' [0.31]
        Det -> 'my' [0.28]

Create several parsers using different queuing strategies and show the
resulting parses.

    >>> from nltk.parse import pchart
    
    >>> parser = pchart.InsideChartParser(grammar)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t
    (S
      (NP (Name Jack))
      (VP
        (V saw)
        (NP
          (NP (Name Bob))
          (PP (P with) (NP (Det my) (N cookie)))))) (p=6.31606532355e-06)
    (S
      (NP (Name Jack))
      (VP
        (VP (V saw) (NP (Name Bob)))
        (PP (P with) (NP (Det my) (N cookie))))) (p=2.03744042695e-07)

    >>> parser = pchart.RandomChartParser(grammar)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t
    (S
      (NP (Name Jack))
      (VP
        (V saw)
        (NP
          (NP (Name Bob))
          (PP (P with) (NP (Det my) (N cookie)))))) (p=6.31606532355e-06)
    (S
      (NP (Name Jack))
      (VP
        (VP (V saw) (NP (Name Bob)))
        (PP (P with) (NP (Det my) (N cookie))))) (p=2.03744042695e-07)
        
    >>> parser = pchart.UnsortedChartParser(grammar)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t
    (S
      (NP (Name Jack))
      (VP
        (V saw)
        (NP
          (NP (Name Bob))
          (PP (P with) (NP (Det my) (N cookie)))))) (p=6.31606532355e-06)
    (S
      (NP (Name Jack))
      (VP
        (VP (V saw) (NP (Name Bob)))
        (PP (P with) (NP (Det my) (N cookie))))) (p=2.03744042695e-07)

    >>> parser = pchart.LongestChartParser(grammar)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t
    (S
      (NP (Name Jack))
      (VP
        (V saw)
        (NP
          (NP (Name Bob))
          (PP (P with) (NP (Det my) (N cookie)))))) (p=6.31606532355e-06)
    (S
      (NP (Name Jack))
      (VP
        (VP (V saw) (NP (Name Bob)))
        (PP (P with) (NP (Det my) (N cookie))))) (p=2.03744042695e-07)

    >>> parser = pchart.InsideChartParser(grammar, beam_size = len(tokens)+1)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t


Unit tests for the Viterbi Parse classes
----------------------------------------

    >>> from nltk.parse import ViterbiParser
    >>> tokens = "Jack saw Bob with my cookie".split()
    >>> grammar = toy_pcfg2

Parse the tokenized sentence.

    >>> parser = ViterbiParser(grammar)
    >>> for t in parser.nbest_parse(tokens):
    ...     print t
    (S
      (NP (Name Jack))
      (VP
        (V saw)
        (NP
          (NP (Name Bob))
          (PP (P with) (NP (Det my) (N cookie)))))) (p=6.31606532355e-06)


Unit tests for the FeatStructNonterminal class
----------------------------------------------

    >>> from nltk.parse import FeatStructNonterminal
    >>> FeatStructNonterminal(
    ...     pos='n', agr=FeatStructNonterminal(number='pl', gender='f'))
    [agr=[gender='f', number='pl'], pos='n']

    >>> FeatStructNonterminal('VP[+fin]/NP[+pl]')
    VP[+fin]/NP[+pl]


Unit tests for the Feature Chart Parser classes
-----------------------------------------------

Let's use the demo() function as a unit test.

    >>> nltk.parse.featurechart.demo(should_print_times=False, trace=1)
    Grammar with 19 productions (start state = [ *type* = 'S' ])
        [ *type* = 'S' ] -> [ *type* = 'NP' ] [ *type* = 'VP' ]
        [ *type* = 'PP' ] -> [ *type* = 'P' ] [ *type* = 'NP' ]
        [ *type* = 'NP' ] -> [ *type* = 'NP' ] [ *type* = 'PP' ]
        [ *type* = 'VP' ] -> [ *type* = 'VP' ] [ *type* = 'PP' ]
        [ *type* = 'VP' ] -> [ *type* = 'V' ] [ *type* = 'NP' ]
        [ *type* = 'VP' ] -> [ *type* = 'V' ]
        [ *type* = 'NP' ] -> [ *type* = 'Det' ]
    [ pl     = True  ] [ *type* = 'N'  ]
    [ pl     = True ]
        [ *type* = 'NP' ] -> [ *type* = 'Det' ]
    [ pl     = False ] [ *type* = 'N'   ]
    [ pl     = False ]
        [ *type* = 'NP' ] -> 'John'
        [ *type* = 'NP' ] -> 'I'
        [ *type* = 'Det' ] -> 'the'
        [ *type* = 'Det' ] -> 'my'
        [ *type* = 'Det' ] -> 'a'
        [ *type* = 'N'   ]
    [ pl     = False ] -> 'dog'
        [ *type* = 'N'   ]
    [ pl     = False ] -> 'cookie'
        [ *type* = 'V' ] -> 'ate'
        [ *type* = 'V' ] -> 'saw'
        [ *type* = 'P' ] -> 'with'
        [ *type* = 'P' ] -> 'under'
    <BLANKLINE>
    Sentence: I saw John with a dog with my cookie
    <BLANKLINE>
    ..........
    <BLANKLINE>
    (S[]
      (NP[] I)
      (VP[]
        (V[] saw)
        (NP[]
          (NP[]
            (NP[] John)
            (PP[] (P[] with) (NP[] (Det[] a) (N[-pl] dog))))
          (PP[] (P[] with) (NP[] (Det[] my) (N[-pl] cookie))))))
    (S[]
      (NP[] I)
      (VP[]
        (V[] saw)
        (NP[]
          (NP[] John)
          (PP[]
            (P[] with)
            (NP[]
              (NP[] (Det[] a) (N[-pl] dog))
              (PP[] (P[] with) (NP[] (Det[] my) (N[-pl] cookie))))))))
    (S[]
      (NP[] I)
      (VP[]
        (VP[] (V[] saw) (NP[] John))
        (PP[]
          (P[] with)
          (NP[]
            (NP[] (Det[] a) (N[-pl] dog))
            (PP[] (P[] with) (NP[] (Det[] my) (N[-pl] cookie)))))))
    (S[]
      (NP[] I)
      (VP[]
        (VP[]
          (VP[] (V[] saw) (NP[] John))
          (PP[] (P[] with) (NP[] (Det[] a) (N[-pl] dog))))
        (PP[] (P[] with) (NP[] (Det[] my) (N[-pl] cookie)))))
    (S[]
      (NP[] I)
      (VP[]
        (VP[]
          (V[] saw)
          (NP[]
            (NP[] John)
            (PP[] (P[] with) (NP[] (Det[] a) (N[-pl] dog)))))
        (PP[] (P[] with) (NP[] (Det[] my) (N[-pl] cookie)))))


Tests for loading grammar files
-------------------------------

# These grammars do not exist anymore:
#     >>> from nltk import data
#     >>> simple_cfg = data.load('grammars/toy.cfg')
#     >>> rdp = RecursiveDescentParser(simple_cfg)
#     >>> prob_cfg = data.load('grammars/toy1.pcfg')
#     >>> vp = ViterbiParser(prob_cfg)

    >>> from nltk.parse import FeatureEarleyChartParser
    >>> from nltk import data
    >>> feat_cfg = data.load('grammars/book_grammars/feat0.fcfg')
    >>> fcp = FeatureEarleyChartParser(feat_cfg)
