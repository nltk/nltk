#############################
# Glue Semantics Formulas Using Event Representation
#
# Entries are links from semantics types to Lists of Glue Formulas
#############################

art_def : (\P Q.exists x.(P(x) & all y.(Q(y) <-> (x = y))), ((v -o r) -o ((f -o Var) -o Var)))
cc_clause : (\P Q.(P & Q), (a -o (b -o f)))
ex_quant : (\P Q.exists x.(P(x) & Q(x)), ((v -o r) -o ((f -o Var) -o Var)))
NN :  (\x.<word>(x), (v -o r)) : [spec]
NN :  (\Q.exists x.(<word>(x) & Q(x)), ((f -o Var) -o Var)) : [] # treat a noun missing its spec as implicitly existentially quantified
no_quant : (\P Q.-exists x.(P(x) & Q(x)), ((v -o r) -o ((f -o Var) -o Var)))
NNP : (\P.exists x.(<word>(x) & P(x)), ((f -o Var) -o Var))
PRP : (\P.exists x.(PRO(x) & P(x)), ((f -o Var) -o Var))
univ_quant : (\P Q.all x.(P(x) -> Q(x)), ((v -o r) -o ((f -o Var) -o Var)))
VB : (\x.exists e.(<word>(e) & subj(e,x)), (subj -o f)) [subj] #iv
VB : (\x y.exists e.(<word>(e) & subj(e,x) & obj(e,y)), (subj -o (obj -o f))) : [subj, obj] #tv
VB : (\x y z.exists e.(<word>(e) & subj(e,x) & obj(e,y) & theme(e,z)), (subj -o (obj -o (theme -o f)))) : [subj, obj, theme] #dtv
VB : (\y z.exists e x.(<word>(e) & subj(e,x) & obj(e,y) & theme(e,z)), obj -o (theme -o f)) : [obj, theme] #incomplete dtv
VB : (\x z.exists e y.(<word>(e) & subj(e,x) & obj(e,y) & theme(e,z)), subj -o (theme -o f)) : [subj, theme] #incomplete dtv
VB : (\z.exists e x y.(<word>(e) & subj(e,x) & obj(e,y) & theme(e,z)), theme -o f) : [theme] #incomplete dtv
VB : (\x y.exists e.(<word>(e) & subj(e,x) & comp(e,y) & P(e)), (subj -o (comp -o f))) : [subj, comp] #tv_comp
VB : (\x P.exists e.(<word>(e) & subj(e,x) & xcomp(e,P)), (subj -o ((xcomp.subj -o xcomp) -o f))) : [subj, xcomp] #equi
VB : (\x y P.exists e.(<word>(e) & subj(e,x) & obj(e,y) & (xcomp e P)), (subj -o (obj -o ((xcomp.subj -o xcomp) -o f)))) : [subj, obj, xcomp] # object equi
VB : (\P.exists e.(<word>(e) & xcomp(e,P)), (xcomp -o f)) : [xcomp] #raising
