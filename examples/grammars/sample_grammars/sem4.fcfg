## Natural Language Toolkit: sem4.fcfg
##
## Extension of sem3.fcfg
## Main additions:
## - a few more lexical entries (including 'no' and 'the')
## - 'is', 'does' and auxiliary negation
## - Predicate categories, including predicate nominals and adjectives
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT
##
## $Id: sem4.fcfg 6855 2008-11-12 15:08:04Z ewan.klein@gmail.com $

% start S
############################
# Grammar Rules
#############################

S[sem = <app(?subj,?vp)>] -> NP[num=?n,sem=?subj] VP[num=?n,sem=?vp]

NP[num=?n,sem=<app(?det,?nom)> ] -> Det[num=?n,sem=?det]  Nom[num=?n,sem=?nom]
NP[loc=?l,num=?n,sem=?np] -> PropN[loc=?l,num=?n,sem=?np]

NP[-loc,num=sg,sem=<\Q. (- exists x. (person(x) & Q(x)))>] -> 'nobody' | 'Nobody'
NP[-loc,num=sg,sem=<\Q. exists x. (person(x) & Q(x))>] -> 'somebody' | 'Somebody'

## Copular predicates
Pred[sem=?prd] -> PredN[sem=?prd] | PP[+loc,+pred,sem=?prd] | Adj[sem=?prd]

## Predicative NPs
## Doesn't block 'is every dog', but determiner semantics is ignored
PredN[num=?n, sem=?nom] -> Det[num=?n] Nom[num=?n, sem=?nom]

Nom[num=?n,sem=?nom] -> N[num=?n,sem=?nom]
Nom[num=?n,sem=<app(?pp,?nom)>] -> N[num=?n,sem=?nom] PP[sem=?pp]

## Transitive verbs
VP[num=?n,sem=<app(?v,?obj)>] -> TV[num=?n,sem=?v] NP[sem=?obj]

## Copular VPs
VP[num=?n,sem=<app(?v,?prd)>] -> AuxP[+cop,num=?n,sem=?v] Pred[sem=?prd]

## Do auxiliaries
VP[+neg,num=?n,sem=<app(?v,?vp)>] -> AuxP[-cop,num=?n,sem=?v] VP[num=pl,sem=?vp]

AuxP[cop=?c,num=?n,sem=<app(?neg,?aux)>] -> Aux[cop=?c,num=?n,sem=?aux] Neg[sem=?neg]
AuxP[cop=?c,num=?n,sem=?aux] -> Aux[cop=?c,num=?n,sem=?aux]

## Intransitive verbs
VP[num=?n,sem=?v] -> IV[num=?n,sem=?v]

## VP-level PPs
VP[num=?n,sem=<app(?pp,?vp)>] -> VP[num=?n,sem=?vp] PP[-pred,sem=?pp]

PP[loc=?l,pred=?prd,sem=<app(?p,?np)>] -> P[loc=?l,pred=?prd,sem=?p] NP[loc=?l,sem=?np]

#############################
# Lexical Rules
#############################

PropN[-loc,num=sg,sem=<\P.P(John)>] -> 'John'
PropN[-loc,num=sg,sem=<\P.P(Mary)>] -> 'Mary'
PropN[-loc,num=sg,sem=<\P.P(Suzie)>] -> 'Suzie'
PropN[-loc,num=sg,sem=<\P.P(Vincent)>] -> 'Vincent'
PropN[-loc,num=sg,sem=<\P.P(Mia)>] -> 'Mia'
PropN[-loc,num=sg,sem=<\P.P(Marsellus)>] -> 'Marsellus'
PropN[-loc,num=sg,sem=<\P.P(Fido)>] -> 'Fido'
PropN[+loc, num=sg,sem=<\P.P(Noosa)>] -> 'Noosa'

NP[-loc, num=sg, sem=<\P.\x.P(x)>] -> 'who' | 'Who'

Det[num=sg,sem=<\P Q. all x. (P(x) -> Q(x))>] -> 'every' | 'Every' 
Det[num=pl,sem=<\P Q. all x. (P(x) -> Q(x))>] -> 'all' | 'All'
Det[sem=<\P Q. exists x. (P(x) & Q(x))>] -> 'some' | 'Some'
Det[num=sg,sem=<\P Q. exists x. (P(x) & Q(x))>] -> 'a' | 'A'
Det[num=sg,sem=<\P Q. (- exists x. (P(x) & Q(x)))>] -> 'no' | 'No'
Det[num=sg,sem=<\P Q. exists x. ((P(x) & Q(x)) & all y. (P(y) -> (x = y)))>] -> 'the' | 'The' 

N[num=sg,sem=<boy>] -> 'boy'
N[num=pl,sem=<boy>] -> 'boys' 
N[num=sg,sem=<girl>] -> 'girl'
N[num=pl,sem=<girl>] -> 'girls'
N[num=sg,sem=<dog>] -> 'dog'
N[num=pl,sem=<dog>] -> 'dogs'
N[num=sg,sem=<student>] -> 'student'
N[num=pl,sem=<student>] -> 'students'
N[num=sg,sem=<person>] -> 'person'
N[num=pl,sem=<person>] -> 'persons'
N[num=sg,sem=<boxerdog>] -> 'boxer'
N[num=pl,sem=<boxerdog>] -> 'boxers'
N[num=sg,sem=<boxer>] -> 'boxer'
N[num=pl,sem=<boxer>] -> 'boxers'
N[num=sg,sem=<garden>] -> 'garden'
N[num=sg,sem=<kitchen>] -> 'kitchen'

Adj[sem=<happy>] -> 'happy'
Adj[sem=<drunk>] -> 'drunk'
Adj[sem=<married>] -> 'married'

TV[num=sg,sem=<\X y. X(\x. chase(y,x))>,tns=pres] -> 'chases'
TV[num=pl,sem=<\X y. X(\x. chase(y,x))>,tns=pres] -> 'chase'
TV[num=sg,sem=<\X y. X(\x. marry(y,x))>,tns=pres] -> 'marries'
TV[num=pl,sem=<\X y. X(\x. marry(y,x))>,tns=pres] -> 'marry'
TV[num=sg,sem=<\X y. X(\x. know(y,x))>,tns=pres] -> 'knows'
TV[num=pl,sem=<\X y. X(\x. know(y,x))>,tns=pres] -> 'know'
TV[num=sg,sem=<\X y. X(\x. see(y,x))>,tns=pres] -> 'sees'
TV[num=pl,sem=<\X y. X(\x. see(y,x))>,tns=pres] -> 'see'
IV[num=sg,sem=<\x. bark(x)>,tns=pres] -> 'barks'
IV[num=pl,sem=<\x. bark(x)>,tns=pres] -> 'bark'
IV[num=sg,sem=<\x. walk(x)>,tns=pres] -> 'walks'
IV[num=pl,sem=<\x. walk(x)>,tns=pres] -> 'walk'
IV[num=pl,sem=<\x. dance(x)>,tns=pres] -> 'dance'
IV[num=sg,sem=<\x. dance(x)>,tns=pres] -> 'dances'

Aux[+cop,num=sg,sem=<\P x. P(x)>,tns=pres] -> 'is'
Aux[+cop,num=pl,sem=<\P x. P(x)>,tns=pres] -> 'are'
Aux[-cop,num=sg,sem=<\P x. P(x)>,tns=pres] -> 'does'
Aux[-cop,num=pl,sem=<\P x. P(x)>,tns=pres] -> 'do'

P[+loc,-pred,sem=<\X P x. X(\y. (P(x) & in(x,y)))>] -> 'in'
P[+loc,+pred,sem=<\X x. X(\y. in(x,y))>] -> 'in'
P[-loc,sem=<\X P x. X(\y. (P(x) & with(x,y)))>] -> 'with'

Neg[sem=<\T P. T(\x.(- P(x)))>] -> 'not'
