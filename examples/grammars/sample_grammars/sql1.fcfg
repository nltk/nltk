## Natural Language Toolkit: sql.fcfg
##
## Deliberately naive string-based grammar for 
## deriving SQL queries from English
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT
##
## $Id$


% start S

S[sem=(?np + WHERE + ?vp)] -> NP[sem=?np] VP[sem=?vp]

VP[sem=(?v + ?pp)] -> IV[sem=?v] PP[sem=?pp]
VP[sem=(?v + ?ap)] -> IV[sem=?v] AP[sem=?ap]
VP[sem=(?v + ?np)] -> TV[sem=?v] NP[sem=?np]
VP[sem=(?vp1 + ?c + ?vp2)] -> VP[sem=?vp1] Conj[sem=?c] VP[sem=?vp2]

NP[sem=(?det + ?n)] -> Det[sem=?det] N[sem=?n]
NP[sem=(?n + ?pp)]  -> N[sem=?n] PP[sem=?pp]
NP[sem=?n]  -> N[sem=?n]  | CardN[sem=?n] 

CardN[sem='1000'] -> '1,000,000' 

PP[sem=(?p + ?np)] -> P[sem=?p] NP[sem=?np]
AP[sem=?pp] -> A[sem=?a] PP[sem=?pp]

NP[sem='Country="greece"'] -> 'Greece'
NP[sem='Country="china"'] -> 'China'

Det[sem='SELECT'] -> 'Which' | 'What'
Conj[sem='AND'] -> 'and'

N[sem='City FROM city_table'] -> 'cities'
N[sem='Population'] -> 'populations'

IV[sem=''] -> 'are'
TV[sem=''] -> 'have'
A -> 'located'
P[sem=''] -> 'in'
P[sem='>'] -> 'above'


