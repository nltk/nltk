#############################
# Glue Semantics Formulas
#
# Entries are links from semantics types to Lists of Glue Formulas
#############################

adj_attributive_intersective : (\x.drs([],[(<word> x)]), f), (\P Q x.((P x)+(Q x)), (f -o ((super.v -o super.r) -o (super.v -o super.r))))
adj_attributive_nonintersective : (\x.drs([],[(<word> x)]), f), (\P Q x.(P (Q x)), (f -o ((super.v -o super.r) -o (super.v -o super.r))))
adj_attributive_relative_intersective :    (\x R.drs([],[(<word> x R)]), f), (\P x R.((P x R)+(R x)), (f -o (super.v -o ((super.v -o super.r) -o super.r))))
adj_attributive_relative_nonintersective : (\x R.drs([],[(<word> x R)]), f), (\P x R.(P x R),         (f -o (super.v -o ((super.v -o super.r) -o super.r))))
adj_predicative : (\Q.(drs([x],[(<word> x)])+(P x)), ((f -o Var) -o Var))
adv : (\x.drs([],[(<word> x)]), f), (\P Q x.(P (Q x)), (f -o (super -o super)))
adv_ModifyingRelativeAdj : (\x.drs([],[(<word> x)]), f), (\P Q x R.(P (Q x R)), (f -o (super -o super)))
art_def : (\P Q.drs([x],[((drs([y],[])+(Q y)) iff (x = y)), (P x)]), ((v -o r) -o ((f -o Var) -o Var)))
cc_clause : (\P Q.(P + Q), (a -o (b -o f)))
dtv : (\x y z.drs([],[(<word> x y z)]), (subj -o (obj -o (theme -o f))))
equi : (\x P.drs([],[(<word> x P)]), (subj -o ((xcomp.subj -o xcomp) -o f)))
ex_quant : (\P Q.((drs([x],[])+(P x))+(Q x)), ((v -o r) -o ((f -o Var) -o Var)))
iv : (\x.drs([],[(<word> x)]), (subj -o f))
n :  (\x.drs([],[(<word> x)]), (v -o r))
no_quant : (\P Q.(not ((drs([x],[])+(P x))+(Q x))), ((v -o r) -o ((f -o Var) -o Var)))
obj_equi : (\x y P.drs([],[(<word> x y P)]), (subj -o (obj -o ((xcomp.subj -o xcomp) -o f))))
pn : (\P.(drs([x],[(x = <word>)])+(P x)), ((f -o Var) -o Var))
pro : (\P.(drs([x],[(x = (alpha x))])+(P x)), ((f -o Var) -o Var))
raising : (\P.drs([],[(<word> P)]), (xcomp -o f))
recip : (\x Q.drs([],[(RECIP x Q)]), (Var -o ((Var -o (f -o super)) -o super)))
tense : (\Q.drs([],[(<word> Q)]), (f -o f))
tv : (\x y.drs([],[(<word> x y)]), (subj -o (obj -o f)))
tv_comp : (\x y.drs([],[(<word> x y)]), (subj -o (comp -o f)))
univ_quant : (\P Q.drs([],[((drs([x],[])+(P x)) implies (Q x))]), ((v -o r) -o ((f -o Var) -o Var)))





#univ_n
#cc_np
#cc_vp
