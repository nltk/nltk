%start Start
%kimmo "gazdar.kimmo.yaml"

Start -> Q
Start -> NP
Start -> S[+fin, +and]

QBAR -> NP[+wh] S/NP
QBAR -> ADVP[+wh] S
Q -> ADVP[+wh] S-W/AP[+wh]
Q -> AP[+wh] S-W/AP[+wh]
Q -> PP[+wh] S-W/PP[+wh]
Q -> NP[+wh] S-W/NP[+wh]

R[+wh] -> PP[+wh] S[+fin, +rel]/PP[+wh]
R -> S[+fin, +rel]/NP
R -> RCOMP S[-empty, +fin, +rel]/NP
NBAR[-wh] -> FACT SBAR
NP[-wh, agr=?a] -> NP[-wh, -spec, agr=?a] R

VP[fin=?f, agr=?a] -> V[class=18, fin=?f, agr=?a] *FOR S[-fin]
VP[fin=?f, agr=?a] -> V[class=17, fin=?f, agr=?a] NP PP PP
VP[fin=?f, agr=?a] -> V[class=16, fin=?f, agr=?a] NP AP
VP[fin=?f, agr=?a] -> V[class=15, fin=?f, agr=?a] VBAR[-fin]
VP[fin=?f, agr=?a] -> V[class=14, fin=?f, agr=?a] S[-fin]
VP[fin=?f, agr=?a] -> V[class=13, fin=?f, agr=?a] NP SBAR
VP[fin=?f, agr=?a] -> V[class=12, fin=?f, agr=?a] PP QBAR
VP[fin=?f, agr=?a] -> V[class=11, fin=?f, agr=?a] NP QBAR
VP[fin=?f, agr=?a] -> V[class=10, fin=?f, agr=?a] QBAR
VP[fin=?f, agr=?a] -> V[class=9, fin=?f, agr=?a] S
VP[fin=?f, agr=?a] -> V[class=8, fin=?f, agr=?a] SBAR
VP[fin=?f, agr=?a] -> V[class=7, fin=?f, agr=?a] NP NP
VP[fin=?f, agr=?a] -> V[class=A, fin=?f, agr=?a] NP PP | V[class=B, fin=?f, agr=?a] NP PP | V[class=6, fin=?f, agr=?a] NP PP
VP[fin=?f, agr=?a] -> V[class=C, fin=?f, agr=?a] PP
VP[fin=?f, agr=?a] -> V[class=A, fin=?f, agr=?a] ADVP | V[class=C, fin=?f, agr=?a] ADVP
VP[fin=?f, agr=?a] -> V[class=3, fin=?f, agr=?a] AP
VP[fin=?f, agr=?a] -> V[class=A, fin=?f, agr=?a] NP | V[class=B, fin=?f, agr=?a] NP
VP[fin=?f, agr=?a]/NP -> V[class=A, fin=?f, agr=?a] NP/NP | V[class=B, fin=?f, agr=?a] NP/NP
VP[fin=?f, agr=?a] -> V[class=A, fin=?f, agr=?a] | V[class=C, fin=?f, agr=?a]

AUXADVP -> *NOT

[pos=?p, +empty]/[pos=?p] ->

DOP[fin=?f, agr=?a] -> DO[fin=?f, agr=?a]
BEP[fin=?f, agr=?a] -> BE[fin=?f, agr=?a]
HAVEP[fin=?f, agr=?a] -> HAVE[fin=?f, agr=?a]
MODALP[fin=?f, agr=?a] -> MODAL[fin=?f, agr=?a]
AUX[fin=?f, agr=?a] -> MODALP[fin=?f, agr=?a] HAVEP BEP
AUX[fin=?f, agr=?a] -> MODALP[fin=?f, agr=?a] BEP
AUX[fin=?f, agr=?a] -> MODALP[fin=?f, agr=?a] HAVEP
AUX[fin=?f, agr=?a] -> MODALP[fin=?f, agr=?a]
AUX[+fin, agr=?a] -> DOP[+fin, agr=?a]
AUX[+fin, agr=?a] -> HAVEP[+fin, agr=?a] BEP
AUX[+fin, agr=?a] -> BEP[+fin, agr=?a]
AUX[+fin, agr=?a] -> HAVEP[+fin, agr=?a]

NBAR[-wh, agr=?a] -> N[agr=?a]
NBAR[-wh, agr=?a] -> AP NBAR[-wh, agr=?a]
NBAR[-wh, agr=?a] -> NBAR[-wh, agr=?a] PP
NP[wh=?w, agr=?a] -> NBAR[wh=?w, agr=?a]
NP[-wh, +spec, agr=?a] -> A[+compar] NBAR[-wh, agr=?a] THAN S[+fin]
NP[-wh, +spec, agr=?a] -> A[+compar] NBAR[-wh, agr=?a] THAN S[+fin]/NP
NP[wh=?w, spec=?s, agr=?a] -> DET[wh=?w, spec=?s] NBAR[-wh, agr=?a]
NP[wh=?w, +spec, agr=?a] -> PRO[wh=?w, agr=?a]
NP[-wh, +spec, agr=?a] -> NAME[agr=?a]
PP[wh=?w] -> *PP
ADVP[+wh] -> SPEC[+wh] ADVP[-wh] | *ADVP[+wh]
ADVP[-wh] -> ADVP[-wh] ADV | ADV
AP[wh=?w] -> AP[wh=?w] VBAR[-fin]/NP
AP[+wh] -> SPEC[+wh] AP[-wh]
AP[-wh] -> AP[-wh] A[-compar] | A[-compar] | N
AP[wh=?w] -> ADVP[wh=?w] A[-compar]
SBAR -> COMP[-wh] S[-empty, +fin]

S[+fin] -> QBAR AUX[+fin] VP[-fin]/QBAR | QBAR VP[+fin]/QBAR
S[+fin] -> SBAR AUX[+fin] VP[-fin]/SBAR | SBAR VP[+fin]/SBAR

S[+fin] -> NP[-wh, agr=?a] VP[+fin, agr=?a]
S[+fin]/NP -> NP[agr=?a]/NP VP[+fin, agr=?a]
S[+fin]/NP -> NP[agr=?a] VP[+fin, agr=?a]/NP
S[-fin]/NP -> NP/NP VP[-fin]
S[-fin]/NP -> NP VP[-fin]/NP

XP -> NP | PP | AP
S[fin=?f] -> NP[-wh, agr=?a] AUX[fin=?f, agr=?a] VP[-fin]
S[fin=?f]/NP -> NP[agr=?a]/NP AUX[fin=?f, agr=?a] VP[-fin]
S[fin=?f] -> NP[-wh, agr=?a] AUX[fin=?f, agr=?a] XP
S[fin=?f]/NP -> NP[agr=?a]/NP AUX[fin=?f, agr=?a] XP
S-NOAUX -> NP[-wh] XP

S-W[fin=?f]/?x -> AUX[fin=?f] S[-fin]/?x
S-W[fin=?f]/?x -> AUX[fin=?f] S-NOAUX/?x | S[fin=?f]/?x

VBAR[fin=?f]/?x -> VBAR[fin=?f]/?x CONJ VBAR[fin=?f]/?x
AP[wh=?w]/?x -> AP[-empty, wh=?w]/?x CONJ AP[-empty, wh=?w]/?x
NP[wh=?w] -> NP[-empty, wh=?w] CONJ NP[-empty, wh=?w]
PP[wh=?w] -> PP[-empty, wh=?w] CONJ PP[-empty, wh=?w]
VP[fin=?f]/?x -> VP[fin=?f]/?x CONJ VP[fin=?f]/?x
S[fin=?f, and=?a] -> S[-empty, fin=?f] CONJ[and=?a] S[-empty, fin=?f]
S[fin=?f, conj=?c]/?x -> S[-empty, fin=?f]/?x CONJ[and=?c] S[-empty, fin=?f]/?x
SBAR[-empty, conj=?c]/?x -> SBAR/?x CONJ[and=?c] SBAR/?x
QBAR[-empty, conj=?c]/?x -> SBAR/?x CONJ[and=?c] SBAR/?x
