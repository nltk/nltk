**
* tts: Python extension module for Festival
*
* Author: David Zhang <dlz@students.cs.mu.oz.au>
*	  Steven Bird <sb@cs.mu.oz.au>
* URL: <http://nltk.sf.net>
* For license information, see LICENSE.TXT
**


DEPENDENCIES

Successful compilation of the extension module depends largely on a working
compilation of the Edinburgh Speech Tools library as well as the Festival
Speech Synthesis System. Refer to their respective installation instructions,
or the following online resources:

Edinburgh Speech Tools
	http://www.cstr.ed.ac.uk/projects/speech_tools/manual-1.2.0/
Festival Speech Synthesis System
	http://festvox.org/docs/manual-1.4.3/festival_toc.html

Python and its respective C API header files must also be present; for more
information on Python extension modules, refer to the following:

Extending and Embedding the Python Interpreter
	http://www.python.org/doc/current/ext/ext.html

Finally, if the Network Audio System is to be used by Festival, it must be
installed correctly and the location of its libraries must be known. For more
information, refer to the following:

The Network Audio System
	http://radscan.com/nas.html


INSTALLATION

If the Network Audio System is to be used, add its library path to the
environment variable LD_LIBRARY_PATH. For example, if the library is installed
in /usr/local/apps/nas-1.6/lib, the following command will work in sh:

export LD_LIBRARY_PATH=/usr/local/apps/nas-1.6/lib:$LD_LIBRARY_PATH

For convenience, place the EST and Festival tarballs in the same location
(which will be referred to later), unzip and untar them; this should create
the "speech_tools" and "festival" directories.

Configure and make Edinburgh Speech Tools, with shared library option enabled
(i.e. edit config file after configure, and uncomment the line SHARED = 1).
Also, if NAS is to be used, enable NAS_AUDIO support by uncommenting the line
INCLUDE_MODULES += NAS_AUDIO 

Configure and make Festival, which will also use the SHARED = 1 option above.

Now compile the extension module with GNU Make, by typing

make FESTIVAL={festival_dir}

where {festival_dir} is the location of the EST and Festival distributions,
as mentioned above. It is expected that EST resides in
{festival_dir}/speech_tools and Festival in {festival_dir}/festival.

If NAS is to be used, use the following make command instead:

make FESTIVAL={festival_dir} EXTRALIB=-laudio


Building Without Make

If make refuses to work, the extension module can also be compiled manually.
Generic instructions are as follows, please refer to the documentation of your
compiler for more information. The command-line options are relevant for the
g++ compiler.

Compile tts.cc into an object file using the -fpic option, making sure that
both the Speech Tools and Festival include paths are included.

Link the resulting tts.o with
	festival/src/lib/libFestival.a
	speech_tools/lib/libestools.a
	speech_tools/lib/libeststring.a
	speech_tools/lib/libestbase.a
as well as the libraries socket, nsl, curses (and audio if NAS is to be used),
and along with the -shared option create a shared library called ttsmodule.so.


USAGE

Once "ttsmodule.so" is present, the extension module is compiled and (almost)
ready to use.

Before entering Python, the environment variable LD_LIBRARY_PATH must include
the EST and Festival library paths (speech_tools/lib and festival/src/lib,
respectively), as well as the NAS library path if NAS is to be used.

Start up Python, and import the module.

>> import tts

If at this point an error message comes up saying a file could not be found,
check your LD_LIBRARY_PATH environment variable.

Otherwise, initialize the Festival engine with default settings.

>> tts.initialize()

Then the tts functions can be called. These functions are borrowed directly
from the Festival C API, and are thus named:

tts.say_file(), tts.say_text() and tts.text_to_wave()

Their parameter lists are identical to those in the Festival C API, so refer
to the Festival manual for more information. Examples:

>> tts.say_text("Hello world")
>> tts.say_file("README")
>> tts.text_to_wave("Hello world", "hello.wav")

If any of the functions crash with a Segmentation Fault, the most likely cause is that the Festival engine was not initialized properly.


SAMPLE APPLICATION

The sample application, weather.py, simply downloads the weather forecast for
Melbourne and sends it to Festival for speech synthesis. To run it, simply
load it with Python.

$ python weather.py

If you have a working Internet connection it will download the weather, print
it to the screen and then read it out.
