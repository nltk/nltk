#!/usr/bin/env python

"""
A Python script to print out all CVS log entries for only files that
have changed since the last release.  I find it difficult to belive
that "CVS log" doesn't provide this functionality itself, but I can't
for the life of me find it..

To use the script, type:

    src/cvschanges release-<m>-<n-1> [outputfile]

from the root of the repository.

"""
import sys, os, re

CVSCOMMAND = 'cvs log %r 2>/dev/null'

BIGDIV = '='*77
SMALLDIV = '-'*28

def filter_entry(entry, since_tag):
    # Strip whitespace.
    entry = entry.strip()

    # Ignore empty entries (fencepost case for split)
    if entry == '': return ''
    
    # Discard entries for attic files.
    if re.match('^.*/Attic/', entry): return ''

    # Get the revision corresponding to the requested symbolic name.
    m = re.search('\n\t%s: ([0-9.]+)\n' % since_tag, entry)
    if m: since_rev = m.group(1)
    else: since_rev = 'NEW_FILE'

    # Get the revision number for the head.
    head_rev = re.search('(?:.*\n)*head: ([0-9.]+)', entry).group(1)

    # Discard entries that haven't changed.
    if head_rev == since_rev: return ''

    # Get rid of any borderline log messages.
    entry = re.sub('%s\nrevision %s\n(.*\n)?' % (SMALLDIV, since_rev),
                   '', entry)

    # Get rid fo ",v" :)
    regexp = re.compile(r'RCS file: (.*),v')
    entry = re.sub(regexp, r'FILE: \1', entry)

    # Get rid of excess info.
    discard = re.compile(r'(Working file:\s+(.*)\n(.*\n)+?'+
                         'total revisions:.*)|'+
                         '(\ndescription:\n)|'+
                         '(revision [0-9.]+\ndate: .*\n)'
                         )
    entry = discard.sub('', entry)
    
    # Return the filtered entry
    return entry.strip() + '\n'


def filter_log(log, since_tag):
    log = re.sub(r'^(\? .*\n)*', '', log).strip()

    # Split into entries.
    entries = log.split(BIGDIV)

    # Filter out entries that we don't want, and remove excess info.
    entries = [filter_entry(entry, since_tag) for entry in entries]
    entries = [entry for entry in entries if entry != '']
    
    # Join the entries back together.
    log = (BIGDIV+'\n').join(entries)
    
    # Get rid of multiple consecutive empty lines
    log = re.sub('\n\n\n+', '\n\n', log)

    return log + BIGDIV + '\n'

def usage(exitval=-1):
    try: print 'Usage: %s <release> <outfile>' % sys.argv[0]
    except: print 'Usage: cvschanges <release> <outfile>' % sys.argv[0]
    sys.exit(exitval)

def main():
    if len(sys.argv) == 3:
        filename = sys.argv[2]
    elif len(sys.argv) == 2:
        filename = None
    else:
        usage()
    since_tag = sys.argv[1]

    print 'SINCE %r' % since_tag
    if since_tag[:1] == '-':
        command = CVSCOMMAND % since_tag
    else:
        command = CVSCOMMAND % ('-r%s:' % since_tag)
    print 'Getting the cvs log...\n    %s' % command
    log = os.popen(command).read()

    print 'Filtering log...'
    log = filter_log(log, since_tag)

    if filename is None:
        out = sys.stdout
    else:
        print 'Writing output to %s...' % filename
        out = open(filename, 'w')
        
    header = (BIGDIV + '\nParsed CVS log\n%s\n' + BIGDIV + '\n\n')
    header = header % os.path.abspath(os.curdir)
    out.write(header + log)

if __name__ == '__main__':
    main()

